(fact 1)
((Y fact_) 1)
(((fn [f] ((fn [x] (x x)) (fn [x] (f (x x))))) fact_) 1)
(((fn [x] (x x)) (fn [x] (fact_ (x x)))) 1)
(((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) 1)
((fact_ ((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x))))) 1)
(((fn [f n] ((zero? n) 1 (* n (f (pred n))))) ((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x))))) 1)
((fn [n] ((zero? n) 1 (* n (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred n))))) 1)
((zero? 1) 1 (* 1 (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 1))))
(((fn [n] (n (K false) true)) 1) 1 (* 1 (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 1))))
((1 (K false) true) 1 (* 1 (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 1))))
(((fn [f x] (f x)) (K false) true) 1 (* 1 (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 1))))
(((fn [x] ((K false) x)) true) 1 (* 1 (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 1))))
(((K false) true) 1 (* 1 (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 1))))
((((fn [x] (fn [u] x)) false) true) 1 (* 1 (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 1))))
(((fn [u] false) true) 1 (* 1 (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 1))))
(false 1 (* 1 (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 1))))
((fn [a b] b) 1 (* 1 (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 1))))
((fn [b] b) (* 1 (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 1))))
(* 1 (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 1)))
((fn [m n] (fn [f x1] (m (n f) x1))) 1 (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 1)))
((fn [n] (fn [f x1] (1 (n f) x1))) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 1)))
(fn [f x1] (1 ((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 1)) f) x1))
(fn [f x1] ((fn [f x2] (f x2)) ((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 1)) f) x1))
(fn [f x1] ((fn [x2] (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 1)) f) x2)) x1))
(fn [f x1] (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 1)) f) x1))
(fn [f x1] ((((fact_ ((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x))))) (pred 1)) f) x1))
(fn [f x1] (((((fn [f n] ((zero? n) 1 (* n (f (pred n))))) ((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x))))) (pred 1)) f) x1))
(fn [f x1] ((((fn [n] ((zero? n) 1 (* n (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred n))))) (pred 1)) f) x1))
(fn [f x1] ((((zero? (pred 1)) 1 (* (pred 1) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 1))))) f) x1))
(fn [f x1] (((((fn [n] (n (K false) true)) (pred 1)) 1 (* (pred 1) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 1))))) f) x1))
(fn [f x1] (((((pred 1) (K false) true) 1 (* (pred 1) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 1))))) f) x1))
(fn [f x1] ((((((fn [n] (fn [f x] (extract (n (inc f) (K x))))) 1) (K false) true) 1 (* (pred 1) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 1))))) f) x1))
(fn [f x1] (((((fn [f x] (extract (1 (inc f) (K x)))) (K false) true) 1 (* (pred 1) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 1))))) f) x1))
(fn [f x1] (((((fn [x] (extract (1 (inc (K false)) (K x)))) true) 1 (* (pred 1) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 1))))) f) x1))
(fn [f x1] ((((extract (1 (inc (K false)) (K true))) 1 (* (pred 1) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 1))))) f) x1))
(fn [f x1] (((((fn [k] (k I)) (1 (inc (K false)) (K true))) 1 (* (pred 1) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 1))))) f) x1))
(fn [f x1] (((((1 (inc (K false)) (K true)) I) 1 (* (pred 1) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 1))))) f) x1))
(fn [f x1] ((((((fn [f x] (f x)) (inc (K false)) (K true)) I) 1 (* (pred 1) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 1))))) f) x1))
(fn [f x1] ((((((fn [x] ((inc (K false)) x)) (K true)) I) 1 (* (pred 1) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 1))))) f) x1))
(fn [f x1] ((((((inc (K false)) (K true)) I) 1 (* (pred 1) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 1))))) f) x1))
(fn [f x1] (((((((fn [f] (fn [g h] (h (g f)))) (K false)) (K true)) I) 1 (* (pred 1) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 1))))) f) x1))
(fn [f x1] ((((((fn [g h] (h (g (K false)))) (K true)) I) 1 (* (pred 1) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 1))))) f) x1))
(fn [f x1] (((((fn [h] (h ((K true) (K false)))) I) 1 (* (pred 1) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 1))))) f) x1))
(fn [f x1] ((((I ((K true) (K false))) 1 (* (pred 1) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 1))))) f) x1))
(fn [f x1] (((((fn [x] x) ((K true) (K false))) 1 (* (pred 1) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 1))))) f) x1))
(fn [f x1] (((((K true) (K false)) 1 (* (pred 1) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 1))))) f) x1))
(fn [f x1] ((((((fn [x] (fn [u] x)) true) (K false)) 1 (* (pred 1) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 1))))) f) x1))
(fn [f x1] (((((fn [u] true) (K false)) 1 (* (pred 1) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 1))))) f) x1))
(fn [f x1] (((true 1 (* (pred 1) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 1))))) f) x1))
(fn [f x1] ((((fn [a b] a) 1 (* (pred 1) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 1))))) f) x1))
(fn [f x1] ((((fn [b] 1) (* (pred 1) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 1))))) f) x1))
(fn [f x1] ((1 f) x1))
(fn [f x1] (((fn [f x] (f x)) f) x1))
(fn [f x1] ((fn [x] (f x)) x1))
(fn [f x1] (f x1))
