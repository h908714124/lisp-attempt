package com.mypack.eval;

import com.mypack.exp.Exp;
import com.mypack.parser.LispParser;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;

class LambdaTest {

    @Test
    void testFact() throws IOException {
        String data = Files.readString(Paths.get("src/lisp/fact.lisp"));
        List<Exp> expressions = LispParser.parseList(data);
        Environment env = new Environment();
        env.load(expressions);
        List<Exp> exp = env.iterEval("(((lambda (f) ((lambda (x) (f x x)) (lambda (x) (f x x)))) fact) 2)", 11);
        Assertions.assertEquals("((((lambda (x) ((lambda (f4 n) (((n (lambda (x4) (lambda (a1 b1) b1)) (lambda (a b) a))) (lambda (f3 x3) (f3 x3)) (lambda (f5 x5) (n ((f4 (lambda (f2 x2) ((n (lambda (g h) (h (g f2))) (lambda (u) x2)) (lambda (u1) u1)))) f5) x5)))) x x)) (lambda (x) ((lambda (f4 n) (((n (lambda (x4) (lambda (a1 b1) b1)) (lambda (a b) a))) (lambda (f3 x3) (f3 x3)) (lambda (f5 x5) (n ((f4 (lambda (f2 x2) ((n (lambda (g h) (h (g f2))) (lambda (u) x2)) (lambda (u1) u1)))) f5) x5)))) x x)))) (lambda (f1 x1) (f1 (f1 x1))))", exp.get(1).toString());
        Assertions.assertEquals("(((((lambda (f4 n) (((n (lambda (x4) (lambda (a1 b1) b1)) (lambda (a b) a))) (lambda (f3 x3) (f3 x3)) (lambda (f5 x5) (n ((f4 (lambda (f2 x2) ((n (lambda (g h) (h (g f2))) (lambda (u) x2)) (lambda (u1) u1)))) f5) x5)))) (lambda (x) ((lambda (f7 n1) (((n1 (lambda (x7) (lambda (a3 b3) b3)) (lambda (a2 b2) a2))) (lambda (f6 x6) (f6 x6)) (lambda (f8 x8) (n1 ((f7 (lambda (f1 x1) ((n1 (lambda (g1 h1) (h1 (g1 f1))) (lambda (u2) x1)) (lambda (u3) u3)))) f8) x8)))) x x)) (lambda (x) ((lambda (f7 n1) (((n1 (lambda (x7) (lambda (a3 b3) b3)) (lambda (a2 b2) a2))) (lambda (f6 x6) (f6 x6)) (lambda (f8 x8) (n1 ((f7 (lambda (f1 x1) ((n1 (lambda (g1 h1) (h1 (g1 f1))) (lambda (u2) x1)) (lambda (u3) u3)))) f8) x8)))) x x))))) (lambda (f1 x1) (f1 (f1 x1))))", exp.get(2).toString());
        Assertions.assertEquals("((((((((lambda (x10) ((lambda (f10 n2) (((n2 (lambda (x13) (lambda (a5 b5) b5)) (lambda (a4 b4) a4))) (lambda (f9 x12) (f9 x12)) (lambda (f11 x9) (n2 ((f10 (lambda (f4 x11) ((n2 (lambda (g2 h2) (h2 (g2 f4))) (lambda (u4) x11)) (lambda (u5) u5)))) f11) x9)))) x10 x10)) (lambda (x4) (lambda (a1 b1) b1)) (lambda (a b) a))) (lambda (f3 x3) (f3 x3)) (lambda (f5 x5) ((lambda (x10) ((lambda (f10 n2) (((n2 (lambda (x13) (lambda (a5 b5) b5)) (lambda (a4 b4) a4))) (lambda (f9 x12) (f9 x12)) (lambda (f11 x9) (n2 ((f10 (lambda (f4 x11) ((n2 (lambda (g2 h2) (h2 (g2 f4))) (lambda (u4) x11)) (lambda (u5) u5)))) f11) x9)))) x10 x10)) (((lambda (x) ((lambda (f7 n1) (((n1 (lambda (x7) (lambda (a3 b3) b3)) (lambda (a2 b2) a2))) (lambda (f6 x6) (f6 x6)) (lambda (f8 x8) (n1 ((f7 (lambda (f1 x1) ((n1 (lambda (g1 h1) (h1 (g1 f1))) (lambda (u2) x1)) (lambda (u3) u3)))) f8) x8)))) x x)) (lambda (f2 x2) (((lambda (x10) ((lambda (f10 n2) (((n2 (lambda (x13) (lambda (a5 b5) b5)) (lambda (a4 b4) a4))) (lambda (f9 x12) (f9 x12)) (lambda (f11 x9) (n2 ((f10 (lambda (f4 x11) ((n2 (lambda (g2 h2) (h2 (g2 f4))) (lambda (u4) x11)) (lambda (u5) u5)))) f11) x9)))) x10 x10)) (lambda (g h) (h (g f2))) (lambda (u) x2)) (lambda (u1) u1)))) f5) x5)))))) (lambda (f1 x1) (f1 (f1 x1))))", exp.get(3).toString());
        Assertions.assertEquals("(((((((((lambda (f10 n2) (((n2 (lambda (x13) (lambda (a5 b5) b5)) (lambda (a4 b4) a4))) (lambda (f9 x12) (f9 x12)) (lambda (f11 x9) (n2 ((f10 (lambda (f4 x11) ((n2 (lambda (g2 h2) (h2 (g2 f4))) (lambda (u4) x11)) (lambda (u5) u5)))) f11) x9)))) (lambda (x4) (lambda (a1 b1) b1)) (lambda (x4) (lambda (a1 b1) b1))) (lambda (a b) a))) (lambda (f3 x3) (f3 x3)) (lambda (f5 x5) (((lambda (f10 n2) (((n2 (lambda (x13) (lambda (a5 b5) b5)) (lambda (a4 b4) a4))) (lambda (f9 x12) (f9 x12)) (lambda (f11 x9) (n2 ((f10 (lambda (f4 x11) ((n2 (lambda (g2 h2) (h2 (g2 f4))) (lambda (u4) x11)) (lambda (u5) u5)))) f11) x9)))) (((lambda (x) ((lambda (f7 n1) (((n1 (lambda (x7) (lambda (a3 b3) b3)) (lambda (a2 b2) a2))) (lambda (f6 x6) (f6 x6)) (lambda (f8 x8) (n1 ((f7 (lambda (f1 x1) ((n1 (lambda (g1 h1) (h1 (g1 f1))) (lambda (u2) x1)) (lambda (u3) u3)))) f8) x8)))) x x)) (lambda (f2 x2) (((lambda (x10) ((lambda (f3 n3) (((n3 (lambda (x14) (lambda (a6 b6) b6)) (lambda (a1 b1) a1))) (lambda (f14 x4) (f14 x4)) (lambda (f12 x3) (n3 ((f3 (lambda (f13 x5) ((n3 (lambda (g3 h3) (h3 (g3 f13))) (lambda (u7) x5)) (lambda (u6) u6)))) f12) x3)))) x10 x10)) (lambda (g h) (h (g f2))) (lambda (u) x2)) (lambda (u1) u1)))) f5) (((lambda (x) ((lambda (f7 n1) (((n1 (lambda (x7) (lambda (a3 b3) b3)) (lambda (a2 b2) a2))) (lambda (f6 x6) (f6 x6)) (lambda (f8 x8) (n1 ((f7 (lambda (f1 x1) ((n1 (lambda (g1 h1) (h1 (g1 f1))) (lambda (u2) x1)) (lambda (u3) u3)))) f8) x8)))) x x)) (lambda (f2 x2) (((lambda (x10) ((lambda (f3 n3) (((n3 (lambda (x14) (lambda (a6 b6) b6)) (lambda (a1 b1) a1))) (lambda (f14 x4) (f14 x4)) (lambda (f12 x3) (n3 ((f3 (lambda (f13 x5) ((n3 (lambda (g3 h3) (h3 (g3 f13))) (lambda (u7) x5)) (lambda (u6) u6)))) f12) x3)))) x10 x10)) (lambda (g h) (h (g f2))) (lambda (u) x2)) (lambda (u1) u1)))) f5)) x5)))))) (lambda (f1 x1) (f1 (f1 x1))))", exp.get(4).toString());
        Assertions.assertEquals("((((((((((((lambda (x1) (lambda (a2 b2) b2)) (lambda (x13) (lambda (a5 b5) b5)) (lambda (a4 b4) a4))) (lambda (f9 x12) (f9 x12)) (lambda (f11 x9) ((lambda (x1) (lambda (a2 b2) b2)) (((lambda (x4) (lambda (a1 b1) b1)) (lambda (f4 x11) (((lambda (x1) (lambda (a2 b2) b2)) (lambda (g2 h2) (h2 (g2 f4))) (lambda (u4) x11)) (lambda (u5) u5)))) f11) x9)))) (lambda (a b) a))) (lambda (f3 x3) (f3 x3)) (lambda (f5 x5) ((((((((lambda (x25) ((lambda (f21 n4) (((n4 (lambda (x23) (lambda (a9 b9) b9)) (lambda (a8 b8) a8))) (lambda (f20 x22) (f20 x22)) (lambda (f22 x24) (n4 ((f21 (lambda (f17 x17) ((n4 (lambda (g4 h4) (h4 (g4 f17))) (lambda (u9) x17)) (lambda (u10) u10)))) f22) x24)))) x25 x25)) (lambda (f18 x18) (((lambda (x15) ((lambda (f19 n5) (((n5 (lambda (x16) (lambda (a10 b10) b10)) (lambda (a7 b7) a7))) (lambda (f15 x20) (f15 x20)) (lambda (f10 x19) (n5 ((f19 (lambda (f16 x21) ((n5 (lambda (g5 h5) (h5 (g5 f16))) (lambda (u12) x21)) (lambda (u11) u11)))) f10) x19)))) x15 x15)) (lambda (g6 h6) (h6 (g6 f18))) (lambda (u13) x18)) (lambda (u8) u8)))) f5) (lambda (x13) (lambda (a5 b5) b5)) (lambda (a4 b4) a4))) (lambda (f9 x12) (f9 x12)) (lambda (f11 x9) ((((lambda (x25) ((lambda (f21 n4) (((n4 (lambda (x23) (lambda (a9 b9) b9)) (lambda (a8 b8) a8))) (lambda (f20 x22) (f20 x22)) (lambda (f22 x24) (n4 ((f21 (lambda (f17 x17) ((n4 (lambda (g4 h4) (h4 (g4 f17))) (lambda (u9) x17)) (lambda (u10) u10)))) f22) x24)))) x25 x25)) (lambda (f18 x18) (((lambda (x15) ((lambda (f19 n5) (((n5 (lambda (x16) (lambda (a10 b10) b10)) (lambda (a7 b7) a7))) (lambda (f15 x20) (f15 x20)) (lambda (f10 x19) (n5 ((f19 (lambda (f16 x21) ((n5 (lambda (g5 h5) (h5 (g5 f16))) (lambda (u12) x21)) (lambda (u11) u11)))) f10) x19)))) x15 x15)) (lambda (g6 h6) (h6 (g6 f18))) (lambda (u13) x18)) (lambda (u8) u8)))) f5) (((((lambda (x) ((lambda (f7 n1) (((n1 (lambda (x7) (lambda (a3 b3) b3)) (lambda (a2 b2) a2))) (lambda (f6 x6) (f6 x6)) (lambda (f8 x8) (n1 ((f7 (lambda (f1 x1) ((n1 (lambda (g1 h1) (h1 (g1 f1))) (lambda (u2) x1)) (lambda (u3) u3)))) f8) x8)))) x x)) (lambda (f2 x2) (((lambda (x10) ((lambda (f3 n3) (((n3 (lambda (x14) (lambda (a6 b6) b6)) (lambda (a1 b1) a1))) (lambda (f14 x4) (f14 x4)) (lambda (f12 x3) (n3 ((f3 (lambda (f13 x5) ((n3 (lambda (g3 h3) (h3 (g3 f13))) (lambda (u7) x5)) (lambda (u6) u6)))) f12) x3)))) x10 x10)) (lambda (g h) (h (g f2))) (lambda (u) x2)) (lambda (u1) u1)))) f5) (lambda (f4 x11) (((((lambda (x25) ((lambda (f21 n4) (((n4 (lambda (x23) (lambda (a9 b9) b9)) (lambda (a8 b8) a8))) (lambda (f20 x22) (f20 x22)) (lambda (f22 x24) (n4 ((f21 (lambda (f17 x17) ((n4 (lambda (g4 h4) (h4 (g4 f17))) (lambda (u9) x17)) (lambda (u10) u10)))) f22) x24)))) x25 x25)) (lambda (f18 x18) (((lambda (x15) ((lambda (f19 n5) (((n5 (lambda (x16) (lambda (a10 b10) b10)) (lambda (a7 b7) a7))) (lambda (f15 x20) (f15 x20)) (lambda (f10 x19) (n5 ((f19 (lambda (f16 x21) ((n5 (lambda (g5 h5) (h5 (g5 f16))) (lambda (u12) x21)) (lambda (u11) u11)))) f10) x19)))) x15 x15)) (lambda (g6 h6) (h6 (g6 f18))) (lambda (u13) x18)) (lambda (u8) u8)))) f5) (lambda (g2 h2) (h2 (g2 f4))) (lambda (u4) x11)) (lambda (u5) u5)))) f11) x9)))) x5)))))) (lambda (f1 x1) (f1 (f1 x1))))", exp.get(5).toString());
        Assertions.assertEquals("(((((((((((lambda (b2) b2)) (lambda (f9 x12) (f9 x12)) (lambda (f11 x9) (lambda (b2) b2)))) (lambda (a b) a))) (lambda (f3 x3) (f3 x3)) (lambda (f5 x5) ((((((((((((lambda (f4 x3) (((lambda (x2) ((lambda (f5 n1) (((n1 (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) (n1 ((f5 (lambda (f2 x5) ((n1 (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) x2 x2)) (lambda (g2 h2) (h2 (g2 f4))) (lambda (u2) x3)) (lambda (u4) u4))) (lambda (x23) (lambda (a9 b9) b9)) (lambda (a8 b8) a8))) (lambda (f20 x22) (f20 x22)) (lambda (f22 x24) ((lambda (f4 x3) (((lambda (x2) ((lambda (f5 n1) (((n1 (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) (n1 ((f5 (lambda (f2 x5) ((n1 (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) x2 x2)) (lambda (g2 h2) (h2 (g2 f4))) (lambda (u2) x3)) (lambda (u4) u4))) (((lambda (f18 x18) (((lambda (x15) ((lambda (f19 n5) (((n5 (lambda (x16) (lambda (a10 b10) b10)) (lambda (a7 b7) a7))) (lambda (f15 x20) (f15 x20)) (lambda (f10 x19) (n5 ((f19 (lambda (f16 x21) ((n5 (lambda (g5 h5) (h5 (g5 f16))) (lambda (u12) x21)) (lambda (u11) u11)))) f10) x19)))) x15 x15)) (lambda (g6 h6) (h6 (g6 f18))) (lambda (u13) x18)) (lambda (u8) u8))) (lambda (f17 x17) (((lambda (f4 x3) (((lambda (x2) ((lambda (f5 n1) (((n1 (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) (n1 ((f5 (lambda (f2 x5) ((n1 (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) x2 x2)) (lambda (g2 h2) (h2 (g2 f4))) (lambda (u2) x3)) (lambda (u4) u4))) (lambda (g4 h4) (h4 (g4 f17))) (lambda (u9) x17)) (lambda (u10) u10)))) f22) x24))))) f5) (lambda (x13) (lambda (a5 b5) b5)) (lambda (a4 b4) a4))) (lambda (f9 x12) (f9 x12)) (lambda (f11 x9) ((((((((lambda (f4 x3) (((lambda (x2) ((lambda (f5 n1) (((n1 (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) (n1 ((f5 (lambda (f2 x5) ((n1 (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) x2 x2)) (lambda (g2 h2) (h2 (g2 f4))) (lambda (u2) x3)) (lambda (u4) u4))) (lambda (x23) (lambda (a9 b9) b9)) (lambda (a8 b8) a8))) (lambda (f20 x22) (f20 x22)) (lambda (f22 x24) ((lambda (f4 x3) (((lambda (x2) ((lambda (f5 n1) (((n1 (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) (n1 ((f5 (lambda (f2 x5) ((n1 (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) x2 x2)) (lambda (g2 h2) (h2 (g2 f4))) (lambda (u2) x3)) (lambda (u4) u4))) (((lambda (f18 x18) (((lambda (x15) ((lambda (f19 n5) (((n5 (lambda (x16) (lambda (a10 b10) b10)) (lambda (a7 b7) a7))) (lambda (f15 x20) (f15 x20)) (lambda (f10 x19) (n5 ((f19 (lambda (f16 x21) ((n5 (lambda (g5 h5) (h5 (g5 f16))) (lambda (u12) x21)) (lambda (u11) u11)))) f10) x19)))) x15 x15)) (lambda (g6 h6) (h6 (g6 f18))) (lambda (u13) x18)) (lambda (u8) u8))) (lambda (f17 x17) (((lambda (f4 x3) (((lambda (x2) ((lambda (f5 n1) (((n1 (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) (n1 ((f5 (lambda (f2 x5) ((n1 (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) x2 x2)) (lambda (g2 h2) (h2 (g2 f4))) (lambda (u2) x3)) (lambda (u4) u4))) (lambda (g4 h4) (h4 (g4 f17))) (lambda (u9) x17)) (lambda (u10) u10)))) f22) x24))))) f5) (((((((((lambda (f9 x12) (((lambda (x9) ((lambda (f10 n2) (((n2 (lambda (x11) (lambda (a5 b5) b5)) (lambda (a4 b4) a4))) (lambda (f5 x15) (f5 x15)) (lambda (f4 x13) (n2 ((f10 (lambda (f7 x16) ((n2 (lambda (g4 h2) (h2 (g4 f7))) (lambda (u8) x16)) (lambda (u5) u5)))) f4) x13)))) x9 x9)) (lambda (g2 h4) (h4 (g2 f9))) (lambda (u9) x12)) (lambda (u4) u4))) (lambda (x7) (lambda (a3 b3) b3)) (lambda (a2 b2) a2))) (lambda (f6 x6) (f6 x6)) (lambda (f8 x8) ((lambda (f9 x12) (((lambda (x9) ((lambda (f10 n2) (((n2 (lambda (x11) (lambda (a5 b5) b5)) (lambda (a4 b4) a4))) (lambda (f5 x15) (f5 x15)) (lambda (f4 x13) (n2 ((f10 (lambda (f7 x16) ((n2 (lambda (g4 h2) (h2 (g4 f7))) (lambda (u8) x16)) (lambda (u5) u5)))) f4) x13)))) x9 x9)) (lambda (g2 h4) (h4 (g2 f9))) (lambda (u9) x12)) (lambda (u4) u4))) (((lambda (f2 x2) (((lambda (x10) ((lambda (f3 n3) (((n3 (lambda (x14) (lambda (a6 b6) b6)) (lambda (a1 b1) a1))) (lambda (f14 x4) (f14 x4)) (lambda (f12 x3) (n3 ((f3 (lambda (f13 x5) ((n3 (lambda (g3 h3) (h3 (g3 f13))) (lambda (u7) x5)) (lambda (u6) u6)))) f12) x3)))) x10 x10)) (lambda (g h) (h (g f2))) (lambda (u) x2)) (lambda (u1) u1))) (lambda (f1 x1) (((lambda (f9 x12) (((lambda (x9) ((lambda (f10 n2) (((n2 (lambda (x11) (lambda (a5 b5) b5)) (lambda (a4 b4) a4))) (lambda (f5 x15) (f5 x15)) (lambda (f4 x13) (n2 ((f10 (lambda (f7 x16) ((n2 (lambda (g4 h2) (h2 (g4 f7))) (lambda (u8) x16)) (lambda (u5) u5)))) f4) x13)))) x9 x9)) (lambda (g2 h4) (h4 (g2 f9))) (lambda (u9) x12)) (lambda (u4) u4))) (lambda (g1 h1) (h1 (g1 f1))) (lambda (u2) x1)) (lambda (u3) u3)))) f8) x8))))) f5) (lambda (f4 x11) (((((((((lambda (f4 x3) (((lambda (x2) ((lambda (f5 n1) (((n1 (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) (n1 ((f5 (lambda (f2 x5) ((n1 (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) x2 x2)) (lambda (g2 h2) (h2 (g2 f4))) (lambda (u2) x3)) (lambda (u4) u4))) (lambda (x23) (lambda (a9 b9) b9)) (lambda (a8 b8) a8))) (lambda (f20 x22) (f20 x22)) (lambda (f22 x24) ((lambda (f4 x3) (((lambda (x2) ((lambda (f5 n1) (((n1 (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) (n1 ((f5 (lambda (f2 x5) ((n1 (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) x2 x2)) (lambda (g2 h2) (h2 (g2 f4))) (lambda (u2) x3)) (lambda (u4) u4))) (((lambda (f18 x18) (((lambda (x15) ((lambda (f19 n5) (((n5 (lambda (x16) (lambda (a10 b10) b10)) (lambda (a7 b7) a7))) (lambda (f15 x20) (f15 x20)) (lambda (f10 x19) (n5 ((f19 (lambda (f16 x21) ((n5 (lambda (g5 h5) (h5 (g5 f16))) (lambda (u12) x21)) (lambda (u11) u11)))) f10) x19)))) x15 x15)) (lambda (g6 h6) (h6 (g6 f18))) (lambda (u13) x18)) (lambda (u8) u8))) (lambda (f17 x17) (((lambda (f4 x3) (((lambda (x2) ((lambda (f5 n1) (((n1 (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) (n1 ((f5 (lambda (f2 x5) ((n1 (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) x2 x2)) (lambda (g2 h2) (h2 (g2 f4))) (lambda (u2) x3)) (lambda (u4) u4))) (lambda (g4 h4) (h4 (g4 f17))) (lambda (u9) x17)) (lambda (u10) u10)))) f22) x24))))) f5) (lambda (g2 h2) (h2 (g2 f4))) (lambda (u4) x11)) (lambda (u5) u5)))) f11) x9)))) x5)))))) (lambda (f1 x1) (f1 (f1 x1))))", exp.get(7).toString());
        Assertions.assertEquals("((((((((((lambda (b2) b2) (lambda (f9 x12) (f9 x12)) (lambda (f11 x9) (lambda (b2) b2)))) (lambda (a b) a))) (lambda (f3 x3) (f3 x3)) (lambda (f5 x5) ((((((((((((((lambda (x2) ((lambda (f5 n1) (((n1 (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) (n1 ((f5 (lambda (f2 x5) ((n1 (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) x2 x2)) (lambda (g2 h2) (h2 (g2 (lambda (x23) (lambda (a9 b9) b9))))) (lambda (u2) (lambda (a8 b8) a8))) (lambda (u4) u4)))) (lambda (f20 x22) (f20 x22)) (lambda (f22 x24) ((((lambda (x2) ((lambda (f5 n1) (((n1 (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) (n1 ((f5 (lambda (f2 x5) ((n1 (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) x2 x2)) (lambda (g2 h2) (h2 (g2 (((lambda (f18 x18) (((lambda (x15) ((lambda (f19 n5) (((n5 (lambda (x16) (lambda (a10 b10) b10)) (lambda (a7 b7) a7))) (lambda (f15 x20) (f15 x20)) (lambda (f10 x19) (n5 ((f19 (lambda (f16 x21) ((n5 (lambda (g5 h5) (h5 (g5 f16))) (lambda (u12) x21)) (lambda (u11) u11)))) f10) x19)))) x15 x15)) (lambda (g6 h6) (h6 (g6 f18))) (lambda (u13) x18)) (lambda (u8) u8))) (lambda (f17 x17) (((lambda (f4 x9) (((lambda (x8) ((lambda (f9 n2) (((n2 (lambda (x7) (lambda (a3 b3) b3)) (lambda (a4 b4) a4))) (lambda (f8 x12) (f8 x12)) (lambda (f6 x10) (n2 ((f9 (lambda (f7 x11) ((n2 (lambda (g3 h3) (h3 (g3 f7))) (lambda (u7) x11)) (lambda (u5) u5)))) f6) x10)))) x8 x8)) (lambda (g7 h7) (h7 (g7 f4))) (lambda (u6) x9)) (lambda (u14) u14))) (lambda (g4 h4) (h4 (g4 f17))) (lambda (u9) x17)) (lambda (u10) u10)))) f22)))) (lambda (u2) x24)) (lambda (u4) u4))))))) f5) (lambda (x13) (lambda (a5 b5) b5)) (lambda (a4 b4) a4))) (lambda (f9 x12) (f9 x12)) (lambda (f11 x9) ((((((((((lambda (x2) ((lambda (f5 n1) (((n1 (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) (n1 ((f5 (lambda (f2 x5) ((n1 (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) x2 x2)) (lambda (g2 h2) (h2 (g2 (lambda (x23) (lambda (a9 b9) b9))))) (lambda (u2) (lambda (a8 b8) a8))) (lambda (u4) u4)))) (lambda (f20 x22) (f20 x22)) (lambda (f22 x24) ((((lambda (x2) ((lambda (f5 n1) (((n1 (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) (n1 ((f5 (lambda (f2 x5) ((n1 (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) x2 x2)) (lambda (g2 h2) (h2 (g2 (((lambda (f18 x18) (((lambda (x15) ((lambda (f19 n5) (((n5 (lambda (x16) (lambda (a10 b10) b10)) (lambda (a7 b7) a7))) (lambda (f15 x20) (f15 x20)) (lambda (f10 x19) (n5 ((f19 (lambda (f16 x21) ((n5 (lambda (g5 h5) (h5 (g5 f16))) (lambda (u12) x21)) (lambda (u11) u11)))) f10) x19)))) x15 x15)) (lambda (g6 h6) (h6 (g6 f18))) (lambda (u13) x18)) (lambda (u8) u8))) (lambda (f17 x17) (((lambda (f4 x9) (((lambda (x8) ((lambda (f9 n2) (((n2 (lambda (x7) (lambda (a3 b3) b3)) (lambda (a4 b4) a4))) (lambda (f8 x12) (f8 x12)) (lambda (f6 x10) (n2 ((f9 (lambda (f7 x11) ((n2 (lambda (g3 h3) (h3 (g3 f7))) (lambda (u7) x11)) (lambda (u5) u5)))) f6) x10)))) x8 x8)) (lambda (g7 h7) (h7 (g7 f4))) (lambda (u6) x9)) (lambda (u14) u14))) (lambda (g4 h4) (h4 (g4 f17))) (lambda (u9) x17)) (lambda (u10) u10)))) f22)))) (lambda (u2) x24)) (lambda (u4) u4))))))) f5) (((((((((((lambda (x9) ((lambda (f10 n2) (((n2 (lambda (x11) (lambda (a5 b5) b5)) (lambda (a4 b4) a4))) (lambda (f5 x15) (f5 x15)) (lambda (f4 x13) (n2 ((f10 (lambda (f7 x16) ((n2 (lambda (g4 h2) (h2 (g4 f7))) (lambda (u8) x16)) (lambda (u5) u5)))) f4) x13)))) x9 x9)) (lambda (g2 h4) (h4 (g2 (lambda (x7) (lambda (a3 b3) b3))))) (lambda (u9) (lambda (a2 b2) a2))) (lambda (u4) u4)))) (lambda (f6 x6) (f6 x6)) (lambda (f8 x8) ((((lambda (x9) ((lambda (f10 n2) (((n2 (lambda (x11) (lambda (a5 b5) b5)) (lambda (a4 b4) a4))) (lambda (f5 x15) (f5 x15)) (lambda (f4 x13) (n2 ((f10 (lambda (f7 x16) ((n2 (lambda (g4 h2) (h2 (g4 f7))) (lambda (u8) x16)) (lambda (u5) u5)))) f4) x13)))) x9 x9)) (lambda (g2 h4) (h4 (g2 (((lambda (f2 x2) (((lambda (x10) ((lambda (f3 n3) (((n3 (lambda (x14) (lambda (a6 b6) b6)) (lambda (a1 b1) a1))) (lambda (f14 x4) (f14 x4)) (lambda (f12 x3) (n3 ((f3 (lambda (f13 x5) ((n3 (lambda (g3 h3) (h3 (g3 f13))) (lambda (u7) x5)) (lambda (u6) u6)))) f12) x3)))) x10 x10)) (lambda (g h) (h (g f2))) (lambda (u) x2)) (lambda (u1) u1))) (lambda (f1 x1) (((lambda (f9 x7) (((lambda (x6) ((lambda (f6 n1) (((n1 (lambda (x8) (lambda (a3 b3) b3)) (lambda (a2 b2) a2))) (lambda (f15 x19) (f15 x19)) (lambda (f11 x17) (n1 ((f6 (lambda (f16 x18) ((n1 (lambda (g6 h5) (h5 (g6 f16))) (lambda (u11) x18)) (lambda (u10) u10)))) f11) x17)))) x6 x6)) (lambda (g5 h6) (h6 (g5 f9))) (lambda (u12) x7)) (lambda (u13) u13))) (lambda (g1 h1) (h1 (g1 f1))) (lambda (u2) x1)) (lambda (u3) u3)))) f8)))) (lambda (u9) x8)) (lambda (u4) u4))))))) f5) (lambda (f4 x11) (((((((((((lambda (x2) ((lambda (f5 n1) (((n1 (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) (n1 ((f5 (lambda (f2 x5) ((n1 (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) x2 x2)) (lambda (g2 h2) (h2 (g2 (lambda (x23) (lambda (a9 b9) b9))))) (lambda (u2) (lambda (a8 b8) a8))) (lambda (u4) u4)))) (lambda (f20 x22) (f20 x22)) (lambda (f22 x24) ((((lambda (x2) ((lambda (f5 n1) (((n1 (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) (n1 ((f5 (lambda (f2 x5) ((n1 (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) x2 x2)) (lambda (g2 h2) (h2 (g2 (((lambda (f18 x18) (((lambda (x15) ((lambda (f19 n5) (((n5 (lambda (x16) (lambda (a10 b10) b10)) (lambda (a7 b7) a7))) (lambda (f15 x20) (f15 x20)) (lambda (f10 x19) (n5 ((f19 (lambda (f16 x21) ((n5 (lambda (g5 h5) (h5 (g5 f16))) (lambda (u12) x21)) (lambda (u11) u11)))) f10) x19)))) x15 x15)) (lambda (g6 h6) (h6 (g6 f18))) (lambda (u13) x18)) (lambda (u8) u8))) (lambda (f17 x17) (((lambda (f4 x9) (((lambda (x8) ((lambda (f9 n2) (((n2 (lambda (x7) (lambda (a3 b3) b3)) (lambda (a4 b4) a4))) (lambda (f8 x12) (f8 x12)) (lambda (f6 x10) (n2 ((f9 (lambda (f7 x11) ((n2 (lambda (g3 h3) (h3 (g3 f7))) (lambda (u7) x11)) (lambda (u5) u5)))) f6) x10)))) x8 x8)) (lambda (g7 h7) (h7 (g7 f4))) (lambda (u6) x9)) (lambda (u14) u14))) (lambda (g4 h4) (h4 (g4 f17))) (lambda (u9) x17)) (lambda (u10) u10)))) f22)))) (lambda (u2) x24)) (lambda (u4) u4))))))) f5) (lambda (g2 h2) (h2 (g2 f4))) (lambda (u4) x11)) (lambda (u5) u5)))) f11) x9)))) x5)))))) (lambda (f1 x1) (f1 (f1 x1))))", exp.get(8).toString());
        Assertions.assertEquals("((((((((((lambda (f9 x12) (f9 x12)) (lambda (f11 x9) (lambda (b2) b2)))) (lambda (a b) a))) (lambda (f3 x3) (f3 x3)) (lambda (f5 x5) (((((((((((((((lambda (f5 n1) (((n1 (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) (n1 ((f5 (lambda (f2 x5) ((n1 (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) (lambda (g2 h2) (h2 (g2 (lambda (x23) (lambda (a9 b9) b9))))) (lambda (g2 h2) (h2 (g2 (lambda (x23) (lambda (a9 b9) b9)))))) (lambda (u2) (lambda (a8 b8) a8))) (lambda (u4) u4)))) (lambda (f20 x22) (f20 x22)) (lambda (f22 x24) (((((lambda (f5 n1) (((n1 (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) (n1 ((f5 (lambda (f2 x5) ((n1 (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) (lambda (g2 h2) (h2 (g2 (((lambda (f18 x18) (((lambda (x15) ((lambda (f19 n5) (((n5 (lambda (x16) (lambda (a10 b10) b10)) (lambda (a7 b7) a7))) (lambda (f15 x20) (f15 x20)) (lambda (f10 x19) (n5 ((f19 (lambda (f16 x21) ((n5 (lambda (g5 h5) (h5 (g5 f16))) (lambda (u12) x21)) (lambda (u11) u11)))) f10) x19)))) x15 x15)) (lambda (g6 h6) (h6 (g6 f18))) (lambda (u13) x18)) (lambda (u8) u8))) (lambda (f17 x17) (((lambda (f4 x9) (((lambda (x8) ((lambda (f9 n2) (((n2 (lambda (x7) (lambda (a3 b3) b3)) (lambda (a4 b4) a4))) (lambda (f8 x12) (f8 x12)) (lambda (f6 x10) (n2 ((f9 (lambda (f7 x11) ((n2 (lambda (g3 h3) (h3 (g3 f7))) (lambda (u7) x11)) (lambda (u5) u5)))) f6) x10)))) x8 x8)) (lambda (g7 h7) (h7 (g7 f4))) (lambda (u6) x9)) (lambda (u14) u14))) (lambda (g4 h4) (h4 (g4 f17))) (lambda (u9) x17)) (lambda (u10) u10)))) f22)))) (lambda (g2 h2) (h2 (g2 (((lambda (f18 x18) (((lambda (x15) ((lambda (f19 n5) (((n5 (lambda (x16) (lambda (a10 b10) b10)) (lambda (a7 b7) a7))) (lambda (f15 x20) (f15 x20)) (lambda (f10 x19) (n5 ((f19 (lambda (f16 x21) ((n5 (lambda (g5 h5) (h5 (g5 f16))) (lambda (u12) x21)) (lambda (u11) u11)))) f10) x19)))) x15 x15)) (lambda (g6 h6) (h6 (g6 f18))) (lambda (u13) x18)) (lambda (u8) u8))) (lambda (f17 x17) (((lambda (f4 x9) (((lambda (x8) ((lambda (f9 n2) (((n2 (lambda (x7) (lambda (a3 b3) b3)) (lambda (a4 b4) a4))) (lambda (f8 x12) (f8 x12)) (lambda (f6 x10) (n2 ((f9 (lambda (f7 x11) ((n2 (lambda (g3 h3) (h3 (g3 f7))) (lambda (u7) x11)) (lambda (u5) u5)))) f6) x10)))) x8 x8)) (lambda (g7 h7) (h7 (g7 f4))) (lambda (u6) x9)) (lambda (u14) u14))) (lambda (g4 h4) (h4 (g4 f17))) (lambda (u9) x17)) (lambda (u10) u10)))) f22))))) (lambda (u2) x24)) (lambda (u4) u4))))))) f5) (lambda (x13) (lambda (a5 b5) b5)) (lambda (a4 b4) a4))) (lambda (f9 x12) (f9 x12)) (lambda (f11 x9) (((((((((((lambda (f5 n1) (((n1 (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) (n1 ((f5 (lambda (f2 x5) ((n1 (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) (lambda (g2 h2) (h2 (g2 (lambda (x23) (lambda (a9 b9) b9))))) (lambda (g2 h2) (h2 (g2 (lambda (x23) (lambda (a9 b9) b9)))))) (lambda (u2) (lambda (a8 b8) a8))) (lambda (u4) u4)))) (lambda (f20 x22) (f20 x22)) (lambda (f22 x24) (((((lambda (f5 n1) (((n1 (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) (n1 ((f5 (lambda (f2 x5) ((n1 (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) (lambda (g2 h2) (h2 (g2 (((lambda (f18 x18) (((lambda (x15) ((lambda (f19 n5) (((n5 (lambda (x16) (lambda (a10 b10) b10)) (lambda (a7 b7) a7))) (lambda (f15 x20) (f15 x20)) (lambda (f10 x19) (n5 ((f19 (lambda (f16 x21) ((n5 (lambda (g5 h5) (h5 (g5 f16))) (lambda (u12) x21)) (lambda (u11) u11)))) f10) x19)))) x15 x15)) (lambda (g6 h6) (h6 (g6 f18))) (lambda (u13) x18)) (lambda (u8) u8))) (lambda (f17 x17) (((lambda (f4 x9) (((lambda (x8) ((lambda (f9 n2) (((n2 (lambda (x7) (lambda (a3 b3) b3)) (lambda (a4 b4) a4))) (lambda (f8 x12) (f8 x12)) (lambda (f6 x10) (n2 ((f9 (lambda (f7 x11) ((n2 (lambda (g3 h3) (h3 (g3 f7))) (lambda (u7) x11)) (lambda (u5) u5)))) f6) x10)))) x8 x8)) (lambda (g7 h7) (h7 (g7 f4))) (lambda (u6) x9)) (lambda (u14) u14))) (lambda (g4 h4) (h4 (g4 f17))) (lambda (u9) x17)) (lambda (u10) u10)))) f22)))) (lambda (g2 h2) (h2 (g2 (((lambda (f18 x18) (((lambda (x15) ((lambda (f19 n5) (((n5 (lambda (x16) (lambda (a10 b10) b10)) (lambda (a7 b7) a7))) (lambda (f15 x20) (f15 x20)) (lambda (f10 x19) (n5 ((f19 (lambda (f16 x21) ((n5 (lambda (g5 h5) (h5 (g5 f16))) (lambda (u12) x21)) (lambda (u11) u11)))) f10) x19)))) x15 x15)) (lambda (g6 h6) (h6 (g6 f18))) (lambda (u13) x18)) (lambda (u8) u8))) (lambda (f17 x17) (((lambda (f4 x9) (((lambda (x8) ((lambda (f9 n2) (((n2 (lambda (x7) (lambda (a3 b3) b3)) (lambda (a4 b4) a4))) (lambda (f8 x12) (f8 x12)) (lambda (f6 x10) (n2 ((f9 (lambda (f7 x11) ((n2 (lambda (g3 h3) (h3 (g3 f7))) (lambda (u7) x11)) (lambda (u5) u5)))) f6) x10)))) x8 x8)) (lambda (g7 h7) (h7 (g7 f4))) (lambda (u6) x9)) (lambda (u14) u14))) (lambda (g4 h4) (h4 (g4 f17))) (lambda (u9) x17)) (lambda (u10) u10)))) f22))))) (lambda (u2) x24)) (lambda (u4) u4))))))) f5) ((((((((((((lambda (f10 n2) (((n2 (lambda (x11) (lambda (a5 b5) b5)) (lambda (a4 b4) a4))) (lambda (f5 x15) (f5 x15)) (lambda (f4 x13) (n2 ((f10 (lambda (f7 x16) ((n2 (lambda (g4 h2) (h2 (g4 f7))) (lambda (u8) x16)) (lambda (u5) u5)))) f4) x13)))) (lambda (g2 h4) (h4 (g2 (lambda (x7) (lambda (a3 b3) b3))))) (lambda (g2 h4) (h4 (g2 (lambda (x7) (lambda (a3 b3) b3)))))) (lambda (u9) (lambda (a2 b2) a2))) (lambda (u4) u4)))) (lambda (f6 x6) (f6 x6)) (lambda (f8 x8) (((((lambda (f10 n2) (((n2 (lambda (x11) (lambda (a5 b5) b5)) (lambda (a4 b4) a4))) (lambda (f5 x15) (f5 x15)) (lambda (f4 x13) (n2 ((f10 (lambda (f7 x16) ((n2 (lambda (g4 h2) (h2 (g4 f7))) (lambda (u8) x16)) (lambda (u5) u5)))) f4) x13)))) (lambda (g2 h4) (h4 (g2 (((lambda (f2 x2) (((lambda (x10) ((lambda (f3 n3) (((n3 (lambda (x14) (lambda (a6 b6) b6)) (lambda (a1 b1) a1))) (lambda (f14 x4) (f14 x4)) (lambda (f12 x3) (n3 ((f3 (lambda (f13 x5) ((n3 (lambda (g3 h3) (h3 (g3 f13))) (lambda (u7) x5)) (lambda (u6) u6)))) f12) x3)))) x10 x10)) (lambda (g h) (h (g f2))) (lambda (u) x2)) (lambda (u1) u1))) (lambda (f1 x1) (((lambda (f9 x7) (((lambda (x6) ((lambda (f6 n1) (((n1 (lambda (x8) (lambda (a3 b3) b3)) (lambda (a2 b2) a2))) (lambda (f15 x19) (f15 x19)) (lambda (f11 x17) (n1 ((f6 (lambda (f16 x18) ((n1 (lambda (g6 h5) (h5 (g6 f16))) (lambda (u11) x18)) (lambda (u10) u10)))) f11) x17)))) x6 x6)) (lambda (g5 h6) (h6 (g5 f9))) (lambda (u12) x7)) (lambda (u13) u13))) (lambda (g1 h1) (h1 (g1 f1))) (lambda (u2) x1)) (lambda (u3) u3)))) f8)))) (lambda (g2 h4) (h4 (g2 (((lambda (f2 x2) (((lambda (x10) ((lambda (f3 n3) (((n3 (lambda (x14) (lambda (a6 b6) b6)) (lambda (a1 b1) a1))) (lambda (f14 x4) (f14 x4)) (lambda (f12 x3) (n3 ((f3 (lambda (f13 x5) ((n3 (lambda (g3 h3) (h3 (g3 f13))) (lambda (u7) x5)) (lambda (u6) u6)))) f12) x3)))) x10 x10)) (lambda (g h) (h (g f2))) (lambda (u) x2)) (lambda (u1) u1))) (lambda (f1 x1) (((lambda (f9 x7) (((lambda (x6) ((lambda (f6 n1) (((n1 (lambda (x8) (lambda (a3 b3) b3)) (lambda (a2 b2) a2))) (lambda (f15 x19) (f15 x19)) (lambda (f11 x17) (n1 ((f6 (lambda (f16 x18) ((n1 (lambda (g6 h5) (h5 (g6 f16))) (lambda (u11) x18)) (lambda (u10) u10)))) f11) x17)))) x6 x6)) (lambda (g5 h6) (h6 (g5 f9))) (lambda (u12) x7)) (lambda (u13) u13))) (lambda (g1 h1) (h1 (g1 f1))) (lambda (u2) x1)) (lambda (u3) u3)))) f8))))) (lambda (u9) x8)) (lambda (u4) u4))))))) f5) (lambda (f4 x11) ((((((((((((lambda (f5 n1) (((n1 (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) (n1 ((f5 (lambda (f2 x5) ((n1 (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) (lambda (g2 h2) (h2 (g2 (lambda (x23) (lambda (a9 b9) b9))))) (lambda (g2 h2) (h2 (g2 (lambda (x23) (lambda (a9 b9) b9)))))) (lambda (u2) (lambda (a8 b8) a8))) (lambda (u4) u4)))) (lambda (f20 x22) (f20 x22)) (lambda (f22 x24) (((((lambda (f5 n1) (((n1 (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) (n1 ((f5 (lambda (f2 x5) ((n1 (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) (lambda (g2 h2) (h2 (g2 (((lambda (f18 x18) (((lambda (x15) ((lambda (f19 n5) (((n5 (lambda (x16) (lambda (a10 b10) b10)) (lambda (a7 b7) a7))) (lambda (f15 x20) (f15 x20)) (lambda (f10 x19) (n5 ((f19 (lambda (f16 x21) ((n5 (lambda (g5 h5) (h5 (g5 f16))) (lambda (u12) x21)) (lambda (u11) u11)))) f10) x19)))) x15 x15)) (lambda (g6 h6) (h6 (g6 f18))) (lambda (u13) x18)) (lambda (u8) u8))) (lambda (f17 x17) (((lambda (f4 x9) (((lambda (x8) ((lambda (f9 n2) (((n2 (lambda (x7) (lambda (a3 b3) b3)) (lambda (a4 b4) a4))) (lambda (f8 x12) (f8 x12)) (lambda (f6 x10) (n2 ((f9 (lambda (f7 x11) ((n2 (lambda (g3 h3) (h3 (g3 f7))) (lambda (u7) x11)) (lambda (u5) u5)))) f6) x10)))) x8 x8)) (lambda (g7 h7) (h7 (g7 f4))) (lambda (u6) x9)) (lambda (u14) u14))) (lambda (g4 h4) (h4 (g4 f17))) (lambda (u9) x17)) (lambda (u10) u10)))) f22)))) (lambda (g2 h2) (h2 (g2 (((lambda (f18 x18) (((lambda (x15) ((lambda (f19 n5) (((n5 (lambda (x16) (lambda (a10 b10) b10)) (lambda (a7 b7) a7))) (lambda (f15 x20) (f15 x20)) (lambda (f10 x19) (n5 ((f19 (lambda (f16 x21) ((n5 (lambda (g5 h5) (h5 (g5 f16))) (lambda (u12) x21)) (lambda (u11) u11)))) f10) x19)))) x15 x15)) (lambda (g6 h6) (h6 (g6 f18))) (lambda (u13) x18)) (lambda (u8) u8))) (lambda (f17 x17) (((lambda (f4 x9) (((lambda (x8) ((lambda (f9 n2) (((n2 (lambda (x7) (lambda (a3 b3) b3)) (lambda (a4 b4) a4))) (lambda (f8 x12) (f8 x12)) (lambda (f6 x10) (n2 ((f9 (lambda (f7 x11) ((n2 (lambda (g3 h3) (h3 (g3 f7))) (lambda (u7) x11)) (lambda (u5) u5)))) f6) x10)))) x8 x8)) (lambda (g7 h7) (h7 (g7 f4))) (lambda (u6) x9)) (lambda (u14) u14))) (lambda (g4 h4) (h4 (g4 f17))) (lambda (u9) x17)) (lambda (u10) u10)))) f22))))) (lambda (u2) x24)) (lambda (u4) u4))))))) f5) (lambda (g2 h2) (h2 (g2 f4))) (lambda (u4) x11)) (lambda (u5) u5)))) f11) x9)))) x5)))))) (lambda (f1 x1) (f1 (f1 x1))))", exp.get(9).toString());
        Assertions.assertEquals("(((((((((lambda (x12) ((lambda (f11 x9) (lambda (b2) b2)) x12))) (lambda (a b) a))) (lambda (f3 x3) (f3 x3)) (lambda (f5 x5) ((((((((((((((((((lambda (g3 h3) (h3 (g3 (lambda (x2) (lambda (a3 b3) b3))))) (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) ((lambda (g3 h3) (h3 (g3 (lambda (x2) (lambda (a3 b3) b3))))) (((lambda (g2 h2) (h2 (g2 (lambda (x23) (lambda (a9 b9) b9))))) (lambda (f2 x5) (((lambda (g3 h3) (h3 (g3 (lambda (x2) (lambda (a3 b3) b3))))) (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) (lambda (u2) (lambda (a8 b8) a8))) (lambda (u4) u4)))) (lambda (f20 x22) (f20 x22)) (lambda (f22 x24) ((((((((lambda (g8 h8) (h8 (g8 (((lambda (f13 x23) (((lambda (x22) ((lambda (f21 n4) (((n4 (lambda (x14) (lambda (a5 b5) b5)) (lambda (a9 b9) a9))) (lambda (f12 x27) (f12 x27)) (lambda (f5 x25) (n4 ((f21 (lambda (f11 x26) ((n4 (lambda (g11 h11) (h11 (g11 f11))) (lambda (u16) x26)) (lambda (u2) u2)))) f5) x25)))) x22 x22)) (lambda (g12 h12) (h12 (g12 f13))) (lambda (u15) x23)) (lambda (u21) u21))) (lambda (f14 x24) (((lambda (f20 x30) (((lambda (x29) ((lambda (f26 n3) (((n3 (lambda (x28) (lambda (a6 b6) b6)) (lambda (a8 b8) a8))) (lambda (f25 x3) (f25 x3)) (lambda (f23 x2) (n3 ((f26 (lambda (f24 x13) ((n3 (lambda (g9 h9) (h9 (g9 f24))) (lambda (u20) x13)) (lambda (u18) u18)))) f23) x2)))) x29 x29)) (lambda (g13 h13) (h13 (g13 f20))) (lambda (u19) x30)) (lambda (u17) u17))) (lambda (g10 h10) (h10 (g10 f14))) (lambda (u22) x24)) (lambda (u4) u4)))) f22)))) (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) ((lambda (g8 h8) (h8 (g8 (((lambda (f13 x23) (((lambda (x22) ((lambda (f21 n4) (((n4 (lambda (x14) (lambda (a5 b5) b5)) (lambda (a9 b9) a9))) (lambda (f12 x27) (f12 x27)) (lambda (f5 x25) (n4 ((f21 (lambda (f11 x26) ((n4 (lambda (g11 h11) (h11 (g11 f11))) (lambda (u16) x26)) (lambda (u2) u2)))) f5) x25)))) x22 x22)) (lambda (g12 h12) (h12 (g12 f13))) (lambda (u15) x23)) (lambda (u21) u21))) (lambda (f14 x24) (((lambda (f20 x30) (((lambda (x29) ((lambda (f26 n3) (((n3 (lambda (x28) (lambda (a6 b6) b6)) (lambda (a8 b8) a8))) (lambda (f25 x3) (f25 x3)) (lambda (f23 x2) (n3 ((f26 (lambda (f24 x13) ((n3 (lambda (g9 h9) (h9 (g9 f24))) (lambda (u20) x13)) (lambda (u18) u18)))) f23) x2)))) x29 x29)) (lambda (g13 h13) (h13 (g13 f20))) (lambda (u19) x30)) (lambda (u17) u17))) (lambda (g10 h10) (h10 (g10 f14))) (lambda (u22) x24)) (lambda (u4) u4)))) f22)))) (((lambda (g2 h2) (h2 (g2 (((lambda (f18 x18) (((lambda (x15) ((lambda (f19 n5) (((n5 (lambda (x16) (lambda (a10 b10) b10)) (lambda (a7 b7) a7))) (lambda (f15 x20) (f15 x20)) (lambda (f10 x19) (n5 ((f19 (lambda (f16 x21) ((n5 (lambda (g5 h5) (h5 (g5 f16))) (lambda (u12) x21)) (lambda (u11) u11)))) f10) x19)))) x15 x15)) (lambda (g6 h6) (h6 (g6 f18))) (lambda (u13) x18)) (lambda (u8) u8))) (lambda (f17 x17) (((lambda (f4 x9) (((lambda (x8) ((lambda (f9 n2) (((n2 (lambda (x7) (lambda (a3 b3) b3)) (lambda (a4 b4) a4))) (lambda (f8 x12) (f8 x12)) (lambda (f6 x10) (n2 ((f9 (lambda (f7 x11) ((n2 (lambda (g3 h3) (h3 (g3 f7))) (lambda (u7) x11)) (lambda (u5) u5)))) f6) x10)))) x8 x8)) (lambda (g7 h7) (h7 (g7 f4))) (lambda (u6) x9)) (lambda (u14) u14))) (lambda (g4 h4) (h4 (g4 f17))) (lambda (u9) x17)) (lambda (u10) u10)))) f22)))) (lambda (f2 x5) (((lambda (g8 h8) (h8 (g8 (((lambda (f13 x23) (((lambda (x22) ((lambda (f21 n4) (((n4 (lambda (x14) (lambda (a5 b5) b5)) (lambda (a9 b9) a9))) (lambda (f12 x27) (f12 x27)) (lambda (f5 x25) (n4 ((f21 (lambda (f11 x26) ((n4 (lambda (g11 h11) (h11 (g11 f11))) (lambda (u16) x26)) (lambda (u2) u2)))) f5) x25)))) x22 x22)) (lambda (g12 h12) (h12 (g12 f13))) (lambda (u15) x23)) (lambda (u21) u21))) (lambda (f14 x24) (((lambda (f20 x30) (((lambda (x29) ((lambda (f26 n3) (((n3 (lambda (x28) (lambda (a6 b6) b6)) (lambda (a8 b8) a8))) (lambda (f25 x3) (f25 x3)) (lambda (f23 x2) (n3 ((f26 (lambda (f24 x13) ((n3 (lambda (g9 h9) (h9 (g9 f24))) (lambda (u20) x13)) (lambda (u18) u18)))) f23) x2)))) x29 x29)) (lambda (g13 h13) (h13 (g13 f20))) (lambda (u19) x30)) (lambda (u17) u17))) (lambda (g10 h10) (h10 (g10 f14))) (lambda (u22) x24)) (lambda (u4) u4)))) f22)))) (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) (lambda (u2) x24)) (lambda (u4) u4))))))) f5) (lambda (x13) (lambda (a5 b5) b5)) (lambda (a4 b4) a4))) (lambda (f9 x12) (f9 x12)) (lambda (f11 x9) ((((((((((((((lambda (g3 h3) (h3 (g3 (lambda (x2) (lambda (a3 b3) b3))))) (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) ((lambda (g3 h3) (h3 (g3 (lambda (x2) (lambda (a3 b3) b3))))) (((lambda (g2 h2) (h2 (g2 (lambda (x23) (lambda (a9 b9) b9))))) (lambda (f2 x5) (((lambda (g3 h3) (h3 (g3 (lambda (x2) (lambda (a3 b3) b3))))) (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) (lambda (u2) (lambda (a8 b8) a8))) (lambda (u4) u4)))) (lambda (f20 x22) (f20 x22)) (lambda (f22 x24) ((((((((lambda (g8 h8) (h8 (g8 (((lambda (f13 x23) (((lambda (x22) ((lambda (f21 n4) (((n4 (lambda (x14) (lambda (a5 b5) b5)) (lambda (a9 b9) a9))) (lambda (f12 x27) (f12 x27)) (lambda (f5 x25) (n4 ((f21 (lambda (f11 x26) ((n4 (lambda (g11 h11) (h11 (g11 f11))) (lambda (u16) x26)) (lambda (u2) u2)))) f5) x25)))) x22 x22)) (lambda (g12 h12) (h12 (g12 f13))) (lambda (u15) x23)) (lambda (u21) u21))) (lambda (f14 x24) (((lambda (f20 x30) (((lambda (x29) ((lambda (f26 n3) (((n3 (lambda (x28) (lambda (a6 b6) b6)) (lambda (a8 b8) a8))) (lambda (f25 x3) (f25 x3)) (lambda (f23 x2) (n3 ((f26 (lambda (f24 x13) ((n3 (lambda (g9 h9) (h9 (g9 f24))) (lambda (u20) x13)) (lambda (u18) u18)))) f23) x2)))) x29 x29)) (lambda (g13 h13) (h13 (g13 f20))) (lambda (u19) x30)) (lambda (u17) u17))) (lambda (g10 h10) (h10 (g10 f14))) (lambda (u22) x24)) (lambda (u4) u4)))) f22)))) (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) ((lambda (g8 h8) (h8 (g8 (((lambda (f13 x23) (((lambda (x22) ((lambda (f21 n4) (((n4 (lambda (x14) (lambda (a5 b5) b5)) (lambda (a9 b9) a9))) (lambda (f12 x27) (f12 x27)) (lambda (f5 x25) (n4 ((f21 (lambda (f11 x26) ((n4 (lambda (g11 h11) (h11 (g11 f11))) (lambda (u16) x26)) (lambda (u2) u2)))) f5) x25)))) x22 x22)) (lambda (g12 h12) (h12 (g12 f13))) (lambda (u15) x23)) (lambda (u21) u21))) (lambda (f14 x24) (((lambda (f20 x30) (((lambda (x29) ((lambda (f26 n3) (((n3 (lambda (x28) (lambda (a6 b6) b6)) (lambda (a8 b8) a8))) (lambda (f25 x3) (f25 x3)) (lambda (f23 x2) (n3 ((f26 (lambda (f24 x13) ((n3 (lambda (g9 h9) (h9 (g9 f24))) (lambda (u20) x13)) (lambda (u18) u18)))) f23) x2)))) x29 x29)) (lambda (g13 h13) (h13 (g13 f20))) (lambda (u19) x30)) (lambda (u17) u17))) (lambda (g10 h10) (h10 (g10 f14))) (lambda (u22) x24)) (lambda (u4) u4)))) f22)))) (((lambda (g2 h2) (h2 (g2 (((lambda (f18 x18) (((lambda (x15) ((lambda (f19 n5) (((n5 (lambda (x16) (lambda (a10 b10) b10)) (lambda (a7 b7) a7))) (lambda (f15 x20) (f15 x20)) (lambda (f10 x19) (n5 ((f19 (lambda (f16 x21) ((n5 (lambda (g5 h5) (h5 (g5 f16))) (lambda (u12) x21)) (lambda (u11) u11)))) f10) x19)))) x15 x15)) (lambda (g6 h6) (h6 (g6 f18))) (lambda (u13) x18)) (lambda (u8) u8))) (lambda (f17 x17) (((lambda (f4 x9) (((lambda (x8) ((lambda (f9 n2) (((n2 (lambda (x7) (lambda (a3 b3) b3)) (lambda (a4 b4) a4))) (lambda (f8 x12) (f8 x12)) (lambda (f6 x10) (n2 ((f9 (lambda (f7 x11) ((n2 (lambda (g3 h3) (h3 (g3 f7))) (lambda (u7) x11)) (lambda (u5) u5)))) f6) x10)))) x8 x8)) (lambda (g7 h7) (h7 (g7 f4))) (lambda (u6) x9)) (lambda (u14) u14))) (lambda (g4 h4) (h4 (g4 f17))) (lambda (u9) x17)) (lambda (u10) u10)))) f22)))) (lambda (f2 x5) (((lambda (g8 h8) (h8 (g8 (((lambda (f13 x23) (((lambda (x22) ((lambda (f21 n4) (((n4 (lambda (x14) (lambda (a5 b5) b5)) (lambda (a9 b9) a9))) (lambda (f12 x27) (f12 x27)) (lambda (f5 x25) (n4 ((f21 (lambda (f11 x26) ((n4 (lambda (g11 h11) (h11 (g11 f11))) (lambda (u16) x26)) (lambda (u2) u2)))) f5) x25)))) x22 x22)) (lambda (g12 h12) (h12 (g12 f13))) (lambda (u15) x23)) (lambda (u21) u21))) (lambda (f14 x24) (((lambda (f20 x30) (((lambda (x29) ((lambda (f26 n3) (((n3 (lambda (x28) (lambda (a6 b6) b6)) (lambda (a8 b8) a8))) (lambda (f25 x3) (f25 x3)) (lambda (f23 x2) (n3 ((f26 (lambda (f24 x13) ((n3 (lambda (g9 h9) (h9 (g9 f24))) (lambda (u20) x13)) (lambda (u18) u18)))) f23) x2)))) x29 x29)) (lambda (g13 h13) (h13 (g13 f20))) (lambda (u19) x30)) (lambda (u17) u17))) (lambda (g10 h10) (h10 (g10 f14))) (lambda (u22) x24)) (lambda (u4) u4)))) f22)))) (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) (lambda (u2) x24)) (lambda (u4) u4))))))) f5) (((((((((((((((lambda (g1 h1) (h1 (g1 (lambda (x1) (lambda (a1 b1) b1))))) (lambda (x11) (lambda (a5 b5) b5)) (lambda (a4 b4) a4))) (lambda (f5 x15) (f5 x15)) (lambda (f4 x13) ((lambda (g1 h1) (h1 (g1 (lambda (x1) (lambda (a1 b1) b1))))) (((lambda (g2 h4) (h4 (g2 (lambda (x7) (lambda (a3 b3) b3))))) (lambda (f7 x16) (((lambda (g1 h1) (h1 (g1 (lambda (x1) (lambda (a1 b1) b1))))) (lambda (g4 h2) (h2 (g4 f7))) (lambda (u8) x16)) (lambda (u5) u5)))) f4) x13)))) (lambda (u9) (lambda (a2 b2) a2))) (lambda (u4) u4)))) (lambda (f6 x6) (f6 x6)) (lambda (f8 x8) ((((((((lambda (g8 h9) (h9 (g8 (((lambda (f23 x24) (((lambda (x9) ((lambda (f24 n5) (((n5 (lambda (x12) (lambda (a10 b10) b10)) (lambda (a7 b7) a7))) (lambda (f18 x26) (f18 x26)) (lambda (f10 x25) (n5 ((f24 (lambda (f19 x27) ((n5 (lambda (g9 h8) (h8 (g9 f19))) (lambda (u20) x27)) (lambda (u19) u19)))) f10) x25)))) x9 x9)) (lambda (g12 h12) (h12 (g12 f23))) (lambda (u21) x24)) (lambda (u16) u16))) (lambda (f22 x23) (((lambda (f26 x29) (((lambda (x28) ((lambda (f25 n4) (((n4 (lambda (x30) (lambda (a9 b9) b9)) (lambda (a8 b8) a8))) (lambda (f21 x22) (f21 x22)) (lambda (f17 x21) (n4 ((f25 (lambda (f20 x20) ((n4 (lambda (g11 h10) (h10 (g11 f20))) (lambda (u4) x20)) (lambda (u9) u9)))) f17) x21)))) x28 x28)) (lambda (g10 h11) (h11 (g10 f26))) (lambda (u15) x29)) (lambda (u14) u14))) (lambda (g7 h7) (h7 (g7 f22))) (lambda (u17) x23)) (lambda (u18) u18)))) f8)))) (lambda (x11) (lambda (a5 b5) b5)) (lambda (a4 b4) a4))) (lambda (f5 x15) (f5 x15)) (lambda (f4 x13) ((lambda (g8 h9) (h9 (g8 (((lambda (f23 x24) (((lambda (x9) ((lambda (f24 n5) (((n5 (lambda (x12) (lambda (a10 b10) b10)) (lambda (a7 b7) a7))) (lambda (f18 x26) (f18 x26)) (lambda (f10 x25) (n5 ((f24 (lambda (f19 x27) ((n5 (lambda (g9 h8) (h8 (g9 f19))) (lambda (u20) x27)) (lambda (u19) u19)))) f10) x25)))) x9 x9)) (lambda (g12 h12) (h12 (g12 f23))) (lambda (u21) x24)) (lambda (u16) u16))) (lambda (f22 x23) (((lambda (f26 x29) (((lambda (x28) ((lambda (f25 n4) (((n4 (lambda (x30) (lambda (a9 b9) b9)) (lambda (a8 b8) a8))) (lambda (f21 x22) (f21 x22)) (lambda (f17 x21) (n4 ((f25 (lambda (f20 x20) ((n4 (lambda (g11 h10) (h10 (g11 f20))) (lambda (u4) x20)) (lambda (u9) u9)))) f17) x21)))) x28 x28)) (lambda (g10 h11) (h11 (g10 f26))) (lambda (u15) x29)) (lambda (u14) u14))) (lambda (g7 h7) (h7 (g7 f22))) (lambda (u17) x23)) (lambda (u18) u18)))) f8)))) (((lambda (g2 h4) (h4 (g2 (((lambda (f2 x2) (((lambda (x10) ((lambda (f3 n3) (((n3 (lambda (x14) (lambda (a6 b6) b6)) (lambda (a1 b1) a1))) (lambda (f14 x4) (f14 x4)) (lambda (f12 x3) (n3 ((f3 (lambda (f13 x5) ((n3 (lambda (g3 h3) (h3 (g3 f13))) (lambda (u7) x5)) (lambda (u6) u6)))) f12) x3)))) x10 x10)) (lambda (g h) (h (g f2))) (lambda (u) x2)) (lambda (u1) u1))) (lambda (f1 x1) (((lambda (f9 x7) (((lambda (x6) ((lambda (f6 n1) (((n1 (lambda (x8) (lambda (a3 b3) b3)) (lambda (a2 b2) a2))) (lambda (f15 x19) (f15 x19)) (lambda (f11 x17) (n1 ((f6 (lambda (f16 x18) ((n1 (lambda (g6 h5) (h5 (g6 f16))) (lambda (u11) x18)) (lambda (u10) u10)))) f11) x17)))) x6 x6)) (lambda (g5 h6) (h6 (g5 f9))) (lambda (u12) x7)) (lambda (u13) u13))) (lambda (g1 h1) (h1 (g1 f1))) (lambda (u2) x1)) (lambda (u3) u3)))) f8)))) (lambda (f7 x16) (((lambda (g8 h9) (h9 (g8 (((lambda (f23 x24) (((lambda (x9) ((lambda (f24 n5) (((n5 (lambda (x12) (lambda (a10 b10) b10)) (lambda (a7 b7) a7))) (lambda (f18 x26) (f18 x26)) (lambda (f10 x25) (n5 ((f24 (lambda (f19 x27) ((n5 (lambda (g9 h8) (h8 (g9 f19))) (lambda (u20) x27)) (lambda (u19) u19)))) f10) x25)))) x9 x9)) (lambda (g12 h12) (h12 (g12 f23))) (lambda (u21) x24)) (lambda (u16) u16))) (lambda (f22 x23) (((lambda (f26 x29) (((lambda (x28) ((lambda (f25 n4) (((n4 (lambda (x30) (lambda (a9 b9) b9)) (lambda (a8 b8) a8))) (lambda (f21 x22) (f21 x22)) (lambda (f17 x21) (n4 ((f25 (lambda (f20 x20) ((n4 (lambda (g11 h10) (h10 (g11 f20))) (lambda (u4) x20)) (lambda (u9) u9)))) f17) x21)))) x28 x28)) (lambda (g10 h11) (h11 (g10 f26))) (lambda (u15) x29)) (lambda (u14) u14))) (lambda (g7 h7) (h7 (g7 f22))) (lambda (u17) x23)) (lambda (u18) u18)))) f8)))) (lambda (g4 h2) (h2 (g4 f7))) (lambda (u8) x16)) (lambda (u5) u5)))) f4) x13)))) (lambda (u9) x8)) (lambda (u4) u4))))))) f5) (lambda (f4 x11) (((((((((((((((lambda (g3 h3) (h3 (g3 (lambda (x2) (lambda (a3 b3) b3))))) (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) ((lambda (g3 h3) (h3 (g3 (lambda (x2) (lambda (a3 b3) b3))))) (((lambda (g2 h2) (h2 (g2 (lambda (x23) (lambda (a9 b9) b9))))) (lambda (f2 x5) (((lambda (g3 h3) (h3 (g3 (lambda (x2) (lambda (a3 b3) b3))))) (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) (lambda (u2) (lambda (a8 b8) a8))) (lambda (u4) u4)))) (lambda (f20 x22) (f20 x22)) (lambda (f22 x24) ((((((((lambda (g8 h8) (h8 (g8 (((lambda (f13 x23) (((lambda (x22) ((lambda (f21 n4) (((n4 (lambda (x14) (lambda (a5 b5) b5)) (lambda (a9 b9) a9))) (lambda (f12 x27) (f12 x27)) (lambda (f5 x25) (n4 ((f21 (lambda (f11 x26) ((n4 (lambda (g11 h11) (h11 (g11 f11))) (lambda (u16) x26)) (lambda (u2) u2)))) f5) x25)))) x22 x22)) (lambda (g12 h12) (h12 (g12 f13))) (lambda (u15) x23)) (lambda (u21) u21))) (lambda (f14 x24) (((lambda (f20 x30) (((lambda (x29) ((lambda (f26 n3) (((n3 (lambda (x28) (lambda (a6 b6) b6)) (lambda (a8 b8) a8))) (lambda (f25 x3) (f25 x3)) (lambda (f23 x2) (n3 ((f26 (lambda (f24 x13) ((n3 (lambda (g9 h9) (h9 (g9 f24))) (lambda (u20) x13)) (lambda (u18) u18)))) f23) x2)))) x29 x29)) (lambda (g13 h13) (h13 (g13 f20))) (lambda (u19) x30)) (lambda (u17) u17))) (lambda (g10 h10) (h10 (g10 f14))) (lambda (u22) x24)) (lambda (u4) u4)))) f22)))) (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) ((lambda (g8 h8) (h8 (g8 (((lambda (f13 x23) (((lambda (x22) ((lambda (f21 n4) (((n4 (lambda (x14) (lambda (a5 b5) b5)) (lambda (a9 b9) a9))) (lambda (f12 x27) (f12 x27)) (lambda (f5 x25) (n4 ((f21 (lambda (f11 x26) ((n4 (lambda (g11 h11) (h11 (g11 f11))) (lambda (u16) x26)) (lambda (u2) u2)))) f5) x25)))) x22 x22)) (lambda (g12 h12) (h12 (g12 f13))) (lambda (u15) x23)) (lambda (u21) u21))) (lambda (f14 x24) (((lambda (f20 x30) (((lambda (x29) ((lambda (f26 n3) (((n3 (lambda (x28) (lambda (a6 b6) b6)) (lambda (a8 b8) a8))) (lambda (f25 x3) (f25 x3)) (lambda (f23 x2) (n3 ((f26 (lambda (f24 x13) ((n3 (lambda (g9 h9) (h9 (g9 f24))) (lambda (u20) x13)) (lambda (u18) u18)))) f23) x2)))) x29 x29)) (lambda (g13 h13) (h13 (g13 f20))) (lambda (u19) x30)) (lambda (u17) u17))) (lambda (g10 h10) (h10 (g10 f14))) (lambda (u22) x24)) (lambda (u4) u4)))) f22)))) (((lambda (g2 h2) (h2 (g2 (((lambda (f18 x18) (((lambda (x15) ((lambda (f19 n5) (((n5 (lambda (x16) (lambda (a10 b10) b10)) (lambda (a7 b7) a7))) (lambda (f15 x20) (f15 x20)) (lambda (f10 x19) (n5 ((f19 (lambda (f16 x21) ((n5 (lambda (g5 h5) (h5 (g5 f16))) (lambda (u12) x21)) (lambda (u11) u11)))) f10) x19)))) x15 x15)) (lambda (g6 h6) (h6 (g6 f18))) (lambda (u13) x18)) (lambda (u8) u8))) (lambda (f17 x17) (((lambda (f4 x9) (((lambda (x8) ((lambda (f9 n2) (((n2 (lambda (x7) (lambda (a3 b3) b3)) (lambda (a4 b4) a4))) (lambda (f8 x12) (f8 x12)) (lambda (f6 x10) (n2 ((f9 (lambda (f7 x11) ((n2 (lambda (g3 h3) (h3 (g3 f7))) (lambda (u7) x11)) (lambda (u5) u5)))) f6) x10)))) x8 x8)) (lambda (g7 h7) (h7 (g7 f4))) (lambda (u6) x9)) (lambda (u14) u14))) (lambda (g4 h4) (h4 (g4 f17))) (lambda (u9) x17)) (lambda (u10) u10)))) f22)))) (lambda (f2 x5) (((lambda (g8 h8) (h8 (g8 (((lambda (f13 x23) (((lambda (x22) ((lambda (f21 n4) (((n4 (lambda (x14) (lambda (a5 b5) b5)) (lambda (a9 b9) a9))) (lambda (f12 x27) (f12 x27)) (lambda (f5 x25) (n4 ((f21 (lambda (f11 x26) ((n4 (lambda (g11 h11) (h11 (g11 f11))) (lambda (u16) x26)) (lambda (u2) u2)))) f5) x25)))) x22 x22)) (lambda (g12 h12) (h12 (g12 f13))) (lambda (u15) x23)) (lambda (u21) u21))) (lambda (f14 x24) (((lambda (f20 x30) (((lambda (x29) ((lambda (f26 n3) (((n3 (lambda (x28) (lambda (a6 b6) b6)) (lambda (a8 b8) a8))) (lambda (f25 x3) (f25 x3)) (lambda (f23 x2) (n3 ((f26 (lambda (f24 x13) ((n3 (lambda (g9 h9) (h9 (g9 f24))) (lambda (u20) x13)) (lambda (u18) u18)))) f23) x2)))) x29 x29)) (lambda (g13 h13) (h13 (g13 f20))) (lambda (u19) x30)) (lambda (u17) u17))) (lambda (g10 h10) (h10 (g10 f14))) (lambda (u22) x24)) (lambda (u4) u4)))) f22)))) (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) (lambda (u2) x24)) (lambda (u4) u4))))))) f5) (lambda (g2 h2) (h2 (g2 f4))) (lambda (u4) x11)) (lambda (u5) u5)))) f11) x9)))) x5)))))) (lambda (f1 x1) (f1 (f1 x1))))", exp.get(10).toString());
        Assertions.assertEquals("(((((((((lambda (x12) ((lambda (f11 x9) (lambda (b2) b2)) x12))) (lambda (a b) a))) (lambda (f3 x3) (f3 x3)) (lambda (f5 x5) ((((((((((((((((((lambda (g3 h3) (h3 (g3 (lambda (x2) (lambda (a3 b3) b3))))) (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) ((lambda (g3 h3) (h3 (g3 (lambda (x2) (lambda (a3 b3) b3))))) (((lambda (g2 h2) (h2 (g2 (lambda (x23) (lambda (a9 b9) b9))))) (lambda (f2 x5) (((lambda (g3 h3) (h3 (g3 (lambda (x2) (lambda (a3 b3) b3))))) (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) (lambda (u2) (lambda (a8 b8) a8))) (lambda (u4) u4)))) (lambda (f20 x22) (f20 x22)) (lambda (f22 x24) ((((((((lambda (g8 h8) (h8 (g8 (((lambda (f13 x23) (((lambda (x22) ((lambda (f21 n4) (((n4 (lambda (x14) (lambda (a5 b5) b5)) (lambda (a9 b9) a9))) (lambda (f12 x27) (f12 x27)) (lambda (f5 x25) (n4 ((f21 (lambda (f11 x26) ((n4 (lambda (g11 h11) (h11 (g11 f11))) (lambda (u16) x26)) (lambda (u2) u2)))) f5) x25)))) x22 x22)) (lambda (g12 h12) (h12 (g12 f13))) (lambda (u15) x23)) (lambda (u21) u21))) (lambda (f14 x24) (((lambda (f20 x30) (((lambda (x29) ((lambda (f26 n3) (((n3 (lambda (x28) (lambda (a6 b6) b6)) (lambda (a8 b8) a8))) (lambda (f25 x3) (f25 x3)) (lambda (f23 x2) (n3 ((f26 (lambda (f24 x13) ((n3 (lambda (g9 h9) (h9 (g9 f24))) (lambda (u20) x13)) (lambda (u18) u18)))) f23) x2)))) x29 x29)) (lambda (g13 h13) (h13 (g13 f20))) (lambda (u19) x30)) (lambda (u17) u17))) (lambda (g10 h10) (h10 (g10 f14))) (lambda (u22) x24)) (lambda (u4) u4)))) f22)))) (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) ((lambda (g8 h8) (h8 (g8 (((lambda (f13 x23) (((lambda (x22) ((lambda (f21 n4) (((n4 (lambda (x14) (lambda (a5 b5) b5)) (lambda (a9 b9) a9))) (lambda (f12 x27) (f12 x27)) (lambda (f5 x25) (n4 ((f21 (lambda (f11 x26) ((n4 (lambda (g11 h11) (h11 (g11 f11))) (lambda (u16) x26)) (lambda (u2) u2)))) f5) x25)))) x22 x22)) (lambda (g12 h12) (h12 (g12 f13))) (lambda (u15) x23)) (lambda (u21) u21))) (lambda (f14 x24) (((lambda (f20 x30) (((lambda (x29) ((lambda (f26 n3) (((n3 (lambda (x28) (lambda (a6 b6) b6)) (lambda (a8 b8) a8))) (lambda (f25 x3) (f25 x3)) (lambda (f23 x2) (n3 ((f26 (lambda (f24 x13) ((n3 (lambda (g9 h9) (h9 (g9 f24))) (lambda (u20) x13)) (lambda (u18) u18)))) f23) x2)))) x29 x29)) (lambda (g13 h13) (h13 (g13 f20))) (lambda (u19) x30)) (lambda (u17) u17))) (lambda (g10 h10) (h10 (g10 f14))) (lambda (u22) x24)) (lambda (u4) u4)))) f22)))) (((lambda (g2 h2) (h2 (g2 (((lambda (f18 x18) (((lambda (x15) ((lambda (f19 n5) (((n5 (lambda (x16) (lambda (a10 b10) b10)) (lambda (a7 b7) a7))) (lambda (f15 x20) (f15 x20)) (lambda (f10 x19) (n5 ((f19 (lambda (f16 x21) ((n5 (lambda (g5 h5) (h5 (g5 f16))) (lambda (u12) x21)) (lambda (u11) u11)))) f10) x19)))) x15 x15)) (lambda (g6 h6) (h6 (g6 f18))) (lambda (u13) x18)) (lambda (u8) u8))) (lambda (f17 x17) (((lambda (f4 x9) (((lambda (x8) ((lambda (f9 n2) (((n2 (lambda (x7) (lambda (a3 b3) b3)) (lambda (a4 b4) a4))) (lambda (f8 x12) (f8 x12)) (lambda (f6 x10) (n2 ((f9 (lambda (f7 x11) ((n2 (lambda (g3 h3) (h3 (g3 f7))) (lambda (u7) x11)) (lambda (u5) u5)))) f6) x10)))) x8 x8)) (lambda (g7 h7) (h7 (g7 f4))) (lambda (u6) x9)) (lambda (u14) u14))) (lambda (g4 h4) (h4 (g4 f17))) (lambda (u9) x17)) (lambda (u10) u10)))) f22)))) (lambda (f2 x5) (((lambda (g8 h8) (h8 (g8 (((lambda (f13 x23) (((lambda (x22) ((lambda (f21 n4) (((n4 (lambda (x14) (lambda (a5 b5) b5)) (lambda (a9 b9) a9))) (lambda (f12 x27) (f12 x27)) (lambda (f5 x25) (n4 ((f21 (lambda (f11 x26) ((n4 (lambda (g11 h11) (h11 (g11 f11))) (lambda (u16) x26)) (lambda (u2) u2)))) f5) x25)))) x22 x22)) (lambda (g12 h12) (h12 (g12 f13))) (lambda (u15) x23)) (lambda (u21) u21))) (lambda (f14 x24) (((lambda (f20 x30) (((lambda (x29) ((lambda (f26 n3) (((n3 (lambda (x28) (lambda (a6 b6) b6)) (lambda (a8 b8) a8))) (lambda (f25 x3) (f25 x3)) (lambda (f23 x2) (n3 ((f26 (lambda (f24 x13) ((n3 (lambda (g9 h9) (h9 (g9 f24))) (lambda (u20) x13)) (lambda (u18) u18)))) f23) x2)))) x29 x29)) (lambda (g13 h13) (h13 (g13 f20))) (lambda (u19) x30)) (lambda (u17) u17))) (lambda (g10 h10) (h10 (g10 f14))) (lambda (u22) x24)) (lambda (u4) u4)))) f22)))) (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) (lambda (u2) x24)) (lambda (u4) u4))))))) f5) (lambda (x13) (lambda (a5 b5) b5)) (lambda (a4 b4) a4))) (lambda (f9 x12) (f9 x12)) (lambda (f11 x9) ((((((((((((((lambda (g3 h3) (h3 (g3 (lambda (x2) (lambda (a3 b3) b3))))) (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) ((lambda (g3 h3) (h3 (g3 (lambda (x2) (lambda (a3 b3) b3))))) (((lambda (g2 h2) (h2 (g2 (lambda (x23) (lambda (a9 b9) b9))))) (lambda (f2 x5) (((lambda (g3 h3) (h3 (g3 (lambda (x2) (lambda (a3 b3) b3))))) (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) (lambda (u2) (lambda (a8 b8) a8))) (lambda (u4) u4)))) (lambda (f20 x22) (f20 x22)) (lambda (f22 x24) ((((((((lambda (g8 h8) (h8 (g8 (((lambda (f13 x23) (((lambda (x22) ((lambda (f21 n4) (((n4 (lambda (x14) (lambda (a5 b5) b5)) (lambda (a9 b9) a9))) (lambda (f12 x27) (f12 x27)) (lambda (f5 x25) (n4 ((f21 (lambda (f11 x26) ((n4 (lambda (g11 h11) (h11 (g11 f11))) (lambda (u16) x26)) (lambda (u2) u2)))) f5) x25)))) x22 x22)) (lambda (g12 h12) (h12 (g12 f13))) (lambda (u15) x23)) (lambda (u21) u21))) (lambda (f14 x24) (((lambda (f20 x30) (((lambda (x29) ((lambda (f26 n3) (((n3 (lambda (x28) (lambda (a6 b6) b6)) (lambda (a8 b8) a8))) (lambda (f25 x3) (f25 x3)) (lambda (f23 x2) (n3 ((f26 (lambda (f24 x13) ((n3 (lambda (g9 h9) (h9 (g9 f24))) (lambda (u20) x13)) (lambda (u18) u18)))) f23) x2)))) x29 x29)) (lambda (g13 h13) (h13 (g13 f20))) (lambda (u19) x30)) (lambda (u17) u17))) (lambda (g10 h10) (h10 (g10 f14))) (lambda (u22) x24)) (lambda (u4) u4)))) f22)))) (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) ((lambda (g8 h8) (h8 (g8 (((lambda (f13 x23) (((lambda (x22) ((lambda (f21 n4) (((n4 (lambda (x14) (lambda (a5 b5) b5)) (lambda (a9 b9) a9))) (lambda (f12 x27) (f12 x27)) (lambda (f5 x25) (n4 ((f21 (lambda (f11 x26) ((n4 (lambda (g11 h11) (h11 (g11 f11))) (lambda (u16) x26)) (lambda (u2) u2)))) f5) x25)))) x22 x22)) (lambda (g12 h12) (h12 (g12 f13))) (lambda (u15) x23)) (lambda (u21) u21))) (lambda (f14 x24) (((lambda (f20 x30) (((lambda (x29) ((lambda (f26 n3) (((n3 (lambda (x28) (lambda (a6 b6) b6)) (lambda (a8 b8) a8))) (lambda (f25 x3) (f25 x3)) (lambda (f23 x2) (n3 ((f26 (lambda (f24 x13) ((n3 (lambda (g9 h9) (h9 (g9 f24))) (lambda (u20) x13)) (lambda (u18) u18)))) f23) x2)))) x29 x29)) (lambda (g13 h13) (h13 (g13 f20))) (lambda (u19) x30)) (lambda (u17) u17))) (lambda (g10 h10) (h10 (g10 f14))) (lambda (u22) x24)) (lambda (u4) u4)))) f22)))) (((lambda (g2 h2) (h2 (g2 (((lambda (f18 x18) (((lambda (x15) ((lambda (f19 n5) (((n5 (lambda (x16) (lambda (a10 b10) b10)) (lambda (a7 b7) a7))) (lambda (f15 x20) (f15 x20)) (lambda (f10 x19) (n5 ((f19 (lambda (f16 x21) ((n5 (lambda (g5 h5) (h5 (g5 f16))) (lambda (u12) x21)) (lambda (u11) u11)))) f10) x19)))) x15 x15)) (lambda (g6 h6) (h6 (g6 f18))) (lambda (u13) x18)) (lambda (u8) u8))) (lambda (f17 x17) (((lambda (f4 x9) (((lambda (x8) ((lambda (f9 n2) (((n2 (lambda (x7) (lambda (a3 b3) b3)) (lambda (a4 b4) a4))) (lambda (f8 x12) (f8 x12)) (lambda (f6 x10) (n2 ((f9 (lambda (f7 x11) ((n2 (lambda (g3 h3) (h3 (g3 f7))) (lambda (u7) x11)) (lambda (u5) u5)))) f6) x10)))) x8 x8)) (lambda (g7 h7) (h7 (g7 f4))) (lambda (u6) x9)) (lambda (u14) u14))) (lambda (g4 h4) (h4 (g4 f17))) (lambda (u9) x17)) (lambda (u10) u10)))) f22)))) (lambda (f2 x5) (((lambda (g8 h8) (h8 (g8 (((lambda (f13 x23) (((lambda (x22) ((lambda (f21 n4) (((n4 (lambda (x14) (lambda (a5 b5) b5)) (lambda (a9 b9) a9))) (lambda (f12 x27) (f12 x27)) (lambda (f5 x25) (n4 ((f21 (lambda (f11 x26) ((n4 (lambda (g11 h11) (h11 (g11 f11))) (lambda (u16) x26)) (lambda (u2) u2)))) f5) x25)))) x22 x22)) (lambda (g12 h12) (h12 (g12 f13))) (lambda (u15) x23)) (lambda (u21) u21))) (lambda (f14 x24) (((lambda (f20 x30) (((lambda (x29) ((lambda (f26 n3) (((n3 (lambda (x28) (lambda (a6 b6) b6)) (lambda (a8 b8) a8))) (lambda (f25 x3) (f25 x3)) (lambda (f23 x2) (n3 ((f26 (lambda (f24 x13) ((n3 (lambda (g9 h9) (h9 (g9 f24))) (lambda (u20) x13)) (lambda (u18) u18)))) f23) x2)))) x29 x29)) (lambda (g13 h13) (h13 (g13 f20))) (lambda (u19) x30)) (lambda (u17) u17))) (lambda (g10 h10) (h10 (g10 f14))) (lambda (u22) x24)) (lambda (u4) u4)))) f22)))) (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) (lambda (u2) x24)) (lambda (u4) u4))))))) f5) (((((((((((((((lambda (g1 h1) (h1 (g1 (lambda (x1) (lambda (a1 b1) b1))))) (lambda (x11) (lambda (a5 b5) b5)) (lambda (a4 b4) a4))) (lambda (f5 x15) (f5 x15)) (lambda (f4 x13) ((lambda (g1 h1) (h1 (g1 (lambda (x1) (lambda (a1 b1) b1))))) (((lambda (g2 h4) (h4 (g2 (lambda (x7) (lambda (a3 b3) b3))))) (lambda (f7 x16) (((lambda (g1 h1) (h1 (g1 (lambda (x1) (lambda (a1 b1) b1))))) (lambda (g4 h2) (h2 (g4 f7))) (lambda (u8) x16)) (lambda (u5) u5)))) f4) x13)))) (lambda (u9) (lambda (a2 b2) a2))) (lambda (u4) u4)))) (lambda (f6 x6) (f6 x6)) (lambda (f8 x8) ((((((((lambda (g8 h9) (h9 (g8 (((lambda (f23 x24) (((lambda (x9) ((lambda (f24 n5) (((n5 (lambda (x12) (lambda (a10 b10) b10)) (lambda (a7 b7) a7))) (lambda (f18 x26) (f18 x26)) (lambda (f10 x25) (n5 ((f24 (lambda (f19 x27) ((n5 (lambda (g9 h8) (h8 (g9 f19))) (lambda (u20) x27)) (lambda (u19) u19)))) f10) x25)))) x9 x9)) (lambda (g12 h12) (h12 (g12 f23))) (lambda (u21) x24)) (lambda (u16) u16))) (lambda (f21 x23) (((lambda (f26 x29) (((lambda (x28) ((lambda (f25 n4) (((n4 (lambda (x30) (lambda (a9 b9) b9)) (lambda (a8 b8) a8))) (lambda (f22 x22) (f22 x22)) (lambda (f17 x21) (n4 ((f25 (lambda (f20 x20) ((n4 (lambda (g11 h10) (h10 (g11 f20))) (lambda (u4) x20)) (lambda (u9) u9)))) f17) x21)))) x28 x28)) (lambda (g10 h11) (h11 (g10 f26))) (lambda (u15) x29)) (lambda (u14) u14))) (lambda (g7 h7) (h7 (g7 f21))) (lambda (u17) x23)) (lambda (u18) u18)))) f8)))) (lambda (x11) (lambda (a5 b5) b5)) (lambda (a4 b4) a4))) (lambda (f5 x15) (f5 x15)) (lambda (f4 x13) ((lambda (g8 h9) (h9 (g8 (((lambda (f23 x24) (((lambda (x9) ((lambda (f24 n5) (((n5 (lambda (x12) (lambda (a10 b10) b10)) (lambda (a7 b7) a7))) (lambda (f18 x26) (f18 x26)) (lambda (f10 x25) (n5 ((f24 (lambda (f19 x27) ((n5 (lambda (g9 h8) (h8 (g9 f19))) (lambda (u20) x27)) (lambda (u19) u19)))) f10) x25)))) x9 x9)) (lambda (g12 h12) (h12 (g12 f23))) (lambda (u21) x24)) (lambda (u16) u16))) (lambda (f21 x23) (((lambda (f26 x29) (((lambda (x28) ((lambda (f25 n4) (((n4 (lambda (x30) (lambda (a9 b9) b9)) (lambda (a8 b8) a8))) (lambda (f22 x22) (f22 x22)) (lambda (f17 x21) (n4 ((f25 (lambda (f20 x20) ((n4 (lambda (g11 h10) (h10 (g11 f20))) (lambda (u4) x20)) (lambda (u9) u9)))) f17) x21)))) x28 x28)) (lambda (g10 h11) (h11 (g10 f26))) (lambda (u15) x29)) (lambda (u14) u14))) (lambda (g7 h7) (h7 (g7 f21))) (lambda (u17) x23)) (lambda (u18) u18)))) f8)))) (((lambda (g2 h4) (h4 (g2 (((lambda (f2 x2) (((lambda (x10) ((lambda (f3 n3) (((n3 (lambda (x14) (lambda (a6 b6) b6)) (lambda (a1 b1) a1))) (lambda (f14 x4) (f14 x4)) (lambda (f12 x3) (n3 ((f3 (lambda (f13 x5) ((n3 (lambda (g3 h3) (h3 (g3 f13))) (lambda (u7) x5)) (lambda (u6) u6)))) f12) x3)))) x10 x10)) (lambda (g h) (h (g f2))) (lambda (u) x2)) (lambda (u1) u1))) (lambda (f1 x1) (((lambda (f9 x7) (((lambda (x6) ((lambda (f6 n1) (((n1 (lambda (x8) (lambda (a3 b3) b3)) (lambda (a2 b2) a2))) (lambda (f15 x19) (f15 x19)) (lambda (f11 x17) (n1 ((f6 (lambda (f16 x18) ((n1 (lambda (g6 h5) (h5 (g6 f16))) (lambda (u11) x18)) (lambda (u10) u10)))) f11) x17)))) x6 x6)) (lambda (g5 h6) (h6 (g5 f9))) (lambda (u12) x7)) (lambda (u13) u13))) (lambda (g1 h1) (h1 (g1 f1))) (lambda (u2) x1)) (lambda (u3) u3)))) f8)))) (lambda (f7 x16) (((lambda (g8 h9) (h9 (g8 (((lambda (f23 x24) (((lambda (x9) ((lambda (f24 n5) (((n5 (lambda (x12) (lambda (a10 b10) b10)) (lambda (a7 b7) a7))) (lambda (f18 x26) (f18 x26)) (lambda (f10 x25) (n5 ((f24 (lambda (f19 x27) ((n5 (lambda (g9 h8) (h8 (g9 f19))) (lambda (u20) x27)) (lambda (u19) u19)))) f10) x25)))) x9 x9)) (lambda (g12 h12) (h12 (g12 f23))) (lambda (u21) x24)) (lambda (u16) u16))) (lambda (f21 x23) (((lambda (f26 x29) (((lambda (x28) ((lambda (f25 n4) (((n4 (lambda (x30) (lambda (a9 b9) b9)) (lambda (a8 b8) a8))) (lambda (f22 x22) (f22 x22)) (lambda (f17 x21) (n4 ((f25 (lambda (f20 x20) ((n4 (lambda (g11 h10) (h10 (g11 f20))) (lambda (u4) x20)) (lambda (u9) u9)))) f17) x21)))) x28 x28)) (lambda (g10 h11) (h11 (g10 f26))) (lambda (u15) x29)) (lambda (u14) u14))) (lambda (g7 h7) (h7 (g7 f21))) (lambda (u17) x23)) (lambda (u18) u18)))) f8)))) (lambda (g4 h2) (h2 (g4 f7))) (lambda (u8) x16)) (lambda (u5) u5)))) f4) x13)))) (lambda (u9) x8)) (lambda (u4) u4))))))) f5) (lambda (f4 x11) (((((((((((((((lambda (g3 h3) (h3 (g3 (lambda (x2) (lambda (a3 b3) b3))))) (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) ((lambda (g3 h3) (h3 (g3 (lambda (x2) (lambda (a3 b3) b3))))) (((lambda (g2 h2) (h2 (g2 (lambda (x23) (lambda (a9 b9) b9))))) (lambda (f2 x5) (((lambda (g3 h3) (h3 (g3 (lambda (x2) (lambda (a3 b3) b3))))) (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) (lambda (u2) (lambda (a8 b8) a8))) (lambda (u4) u4)))) (lambda (f20 x22) (f20 x22)) (lambda (f22 x24) ((((((((lambda (g8 h8) (h8 (g8 (((lambda (f13 x23) (((lambda (x22) ((lambda (f21 n4) (((n4 (lambda (x14) (lambda (a5 b5) b5)) (lambda (a9 b9) a9))) (lambda (f12 x27) (f12 x27)) (lambda (f5 x25) (n4 ((f21 (lambda (f11 x26) ((n4 (lambda (g11 h11) (h11 (g11 f11))) (lambda (u16) x26)) (lambda (u2) u2)))) f5) x25)))) x22 x22)) (lambda (g12 h12) (h12 (g12 f13))) (lambda (u15) x23)) (lambda (u21) u21))) (lambda (f14 x24) (((lambda (f20 x30) (((lambda (x29) ((lambda (f26 n3) (((n3 (lambda (x28) (lambda (a6 b6) b6)) (lambda (a8 b8) a8))) (lambda (f25 x3) (f25 x3)) (lambda (f23 x2) (n3 ((f26 (lambda (f24 x13) ((n3 (lambda (g9 h9) (h9 (g9 f24))) (lambda (u20) x13)) (lambda (u18) u18)))) f23) x2)))) x29 x29)) (lambda (g13 h13) (h13 (g13 f20))) (lambda (u19) x30)) (lambda (u17) u17))) (lambda (g10 h10) (h10 (g10 f14))) (lambda (u22) x24)) (lambda (u4) u4)))) f22)))) (lambda (x1) (lambda (a1 b1) b1)) (lambda (a2 b2) a2))) (lambda (f3 x6) (f3 x6)) (lambda (f1 x4) ((lambda (g8 h8) (h8 (g8 (((lambda (f13 x23) (((lambda (x22) ((lambda (f21 n4) (((n4 (lambda (x14) (lambda (a5 b5) b5)) (lambda (a9 b9) a9))) (lambda (f12 x27) (f12 x27)) (lambda (f5 x25) (n4 ((f21 (lambda (f11 x26) ((n4 (lambda (g11 h11) (h11 (g11 f11))) (lambda (u16) x26)) (lambda (u2) u2)))) f5) x25)))) x22 x22)) (lambda (g12 h12) (h12 (g12 f13))) (lambda (u15) x23)) (lambda (u21) u21))) (lambda (f14 x24) (((lambda (f20 x30) (((lambda (x29) ((lambda (f26 n3) (((n3 (lambda (x28) (lambda (a6 b6) b6)) (lambda (a8 b8) a8))) (lambda (f25 x3) (f25 x3)) (lambda (f23 x2) (n3 ((f26 (lambda (f24 x13) ((n3 (lambda (g9 h9) (h9 (g9 f24))) (lambda (u20) x13)) (lambda (u18) u18)))) f23) x2)))) x29 x29)) (lambda (g13 h13) (h13 (g13 f20))) (lambda (u19) x30)) (lambda (u17) u17))) (lambda (g10 h10) (h10 (g10 f14))) (lambda (u22) x24)) (lambda (u4) u4)))) f22)))) (((lambda (g2 h2) (h2 (g2 (((lambda (f18 x18) (((lambda (x15) ((lambda (f19 n5) (((n5 (lambda (x16) (lambda (a10 b10) b10)) (lambda (a7 b7) a7))) (lambda (f15 x20) (f15 x20)) (lambda (f10 x19) (n5 ((f19 (lambda (f16 x21) ((n5 (lambda (g5 h5) (h5 (g5 f16))) (lambda (u12) x21)) (lambda (u11) u11)))) f10) x19)))) x15 x15)) (lambda (g6 h6) (h6 (g6 f18))) (lambda (u13) x18)) (lambda (u8) u8))) (lambda (f17 x17) (((lambda (f4 x9) (((lambda (x8) ((lambda (f9 n2) (((n2 (lambda (x7) (lambda (a3 b3) b3)) (lambda (a4 b4) a4))) (lambda (f8 x12) (f8 x12)) (lambda (f6 x10) (n2 ((f9 (lambda (f7 x11) ((n2 (lambda (g3 h3) (h3 (g3 f7))) (lambda (u7) x11)) (lambda (u5) u5)))) f6) x10)))) x8 x8)) (lambda (g7 h7) (h7 (g7 f4))) (lambda (u6) x9)) (lambda (u14) u14))) (lambda (g4 h4) (h4 (g4 f17))) (lambda (u9) x17)) (lambda (u10) u10)))) f22)))) (lambda (f2 x5) (((lambda (g8 h8) (h8 (g8 (((lambda (f13 x23) (((lambda (x22) ((lambda (f21 n4) (((n4 (lambda (x14) (lambda (a5 b5) b5)) (lambda (a9 b9) a9))) (lambda (f12 x27) (f12 x27)) (lambda (f5 x25) (n4 ((f21 (lambda (f11 x26) ((n4 (lambda (g11 h11) (h11 (g11 f11))) (lambda (u16) x26)) (lambda (u2) u2)))) f5) x25)))) x22 x22)) (lambda (g12 h12) (h12 (g12 f13))) (lambda (u15) x23)) (lambda (u21) u21))) (lambda (f14 x24) (((lambda (f20 x30) (((lambda (x29) ((lambda (f26 n3) (((n3 (lambda (x28) (lambda (a6 b6) b6)) (lambda (a8 b8) a8))) (lambda (f25 x3) (f25 x3)) (lambda (f23 x2) (n3 ((f26 (lambda (f24 x13) ((n3 (lambda (g9 h9) (h9 (g9 f24))) (lambda (u20) x13)) (lambda (u18) u18)))) f23) x2)))) x29 x29)) (lambda (g13 h13) (h13 (g13 f20))) (lambda (u19) x30)) (lambda (u17) u17))) (lambda (g10 h10) (h10 (g10 f14))) (lambda (u22) x24)) (lambda (u4) u4)))) f22)))) (lambda (g1 h1) (h1 (g1 f2))) (lambda (u3) x5)) (lambda (u1) u1)))) f1) x4)))) (lambda (u2) x24)) (lambda (u4) u4))))))) f5) (lambda (g2 h2) (h2 (g2 f4))) (lambda (u4) x11)) (lambda (u5) u5)))) f11) x9)))) x5)))))) (lambda (f1 x1) (f1 (f1 x1))))", exp.get(11).toString());
        Assertions.assertEquals("", exp.get(12).toString());
        Assertions.assertEquals("", exp.get(13).toString());
        Assertions.assertEquals("", exp.get(14).toString());
        Assertions.assertEquals("", exp.get(15).toString());
        Assertions.assertEquals("", exp.get(16).toString());
        Assertions.assertEquals("", exp.get(17).toString());
        Assertions.assertEquals("", exp.get(18).toString());
        Assertions.assertEquals("", exp.get(19).toString());
    }

    @Test
    void testFact1() {
        Exp exp = LispParser.parse("((lambda (x12) ((lambda (f11 n2) ((n2 (lambda (x10) (lambda (a5 b5) b5)) " +
                "(lambda (a4 b4) a4)) (lambda (f10 x14) (f10 x14)) (lambda (f4 x11) (n2 ((f11 (lambda (f9 x13) " +
                "((n2 (lambda (g2 h2) (h2 (g2 f9))) (lambda (u4) x13)) (lambda (u5) u5)))) f4) x11)))) x12 x12)) " +
                "(lambda (x4) (lambda (a1 b1) b1)) (lambda (a b) a))");
        Exp result = Eval.iterEval(exp).get(1);
        Assertions.assertEquals("", result.toString());
    }
}