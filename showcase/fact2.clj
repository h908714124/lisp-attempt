(fact 2)
((Y fact_) 2)
(((fn [f] ((fn [x] (x x)) (fn [x] (f (x x))))) fact_) 2)
(((fn [x] (x x)) (fn [x] (fact_ (x x)))) 2)
(((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) 2)
((fact_ ((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x))))) 2)
(((fn [f n] ((zero? n) 1 (* n (f (pred n))))) ((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x))))) 2)
((fn [n] ((zero? n) 1 (* n (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred n))))) 2)
((zero? 2) 1 (* 2 (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2))))
(((fn [n] (n (K false) true)) 2) 1 (* 2 (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2))))
((2 (K false) true) 1 (* 2 (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2))))
(((fn [f x] (f (f x))) (K false) true) 1 (* 2 (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2))))
(((fn [x] ((K false) ((K false) x))) true) 1 (* 2 (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2))))
(((K false) ((K false) true)) 1 (* 2 (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2))))
((((fn [x] (fn [u] x)) false) ((K false) true)) 1 (* 2 (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2))))
(((fn [u] false) ((K false) true)) 1 (* 2 (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2))))
(false 1 (* 2 (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2))))
((fn [a b] b) 1 (* 2 (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2))))
((fn [b] b) (* 2 (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2))))
(* 2 (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)))
((fn [m n] (fn [f x1] (m (n f) x1))) 2 (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)))
((fn [n] (fn [f x1] (2 (n f) x1))) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)))
(fn [f x1] (2 ((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1))
(fn [f x1] ((fn [f x2] (f (f x2))) ((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1))
(fn [f x1] ((fn [x2] (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x2))) x1))
(fn [f x1] (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] ((((fact_ ((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x))))) (pred 2)) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] (((((fn [f n] ((zero? n) 1 (* n (f (pred n))))) ((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x))))) (pred 2)) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] ((((fn [n] ((zero? n) 1 (* n (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred n))))) (pred 2)) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] ((((zero? (pred 2)) 1 (* (pred 2) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))))) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] (((((fn [n] (n (K false) true)) (pred 2)) 1 (* (pred 2) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))))) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] (((((pred 2) (K false) true) 1 (* (pred 2) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))))) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] ((((((fn [n] (fn [f x] (extract (n (inc f) (K x))))) 2) (K false) true) 1 (* (pred 2) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))))) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] (((((fn [f x] (extract (2 (inc f) (K x)))) (K false) true) 1 (* (pred 2) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))))) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] (((((fn [x] (extract (2 (inc (K false)) (K x)))) true) 1 (* (pred 2) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))))) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] ((((extract (2 (inc (K false)) (K true))) 1 (* (pred 2) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))))) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] (((((fn [k] (k I)) (2 (inc (K false)) (K true))) 1 (* (pred 2) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))))) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] (((((2 (inc (K false)) (K true)) I) 1 (* (pred 2) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))))) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] ((((((fn [f x] (f (f x))) (inc (K false)) (K true)) I) 1 (* (pred 2) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))))) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] ((((((fn [x] ((inc (K false)) ((inc (K false)) x))) (K true)) I) 1 (* (pred 2) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))))) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] ((((((inc (K false)) ((inc (K false)) (K true))) I) 1 (* (pred 2) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))))) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] (((((((fn [f] (fn [g h] (h (g f)))) (K false)) ((inc (K false)) (K true))) I) 1 (* (pred 2) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))))) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] ((((((fn [g h] (h (g (K false)))) ((inc (K false)) (K true))) I) 1 (* (pred 2) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))))) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] (((((fn [h] (h (((inc (K false)) (K true)) (K false)))) I) 1 (* (pred 2) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))))) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] ((((I (((inc (K false)) (K true)) (K false))) 1 (* (pred 2) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))))) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] (((((fn [x] x) (((inc (K false)) (K true)) (K false))) 1 (* (pred 2) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))))) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] ((((((inc (K false)) (K true)) (K false)) 1 (* (pred 2) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))))) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] (((((((fn [f] (fn [g h] (h (g f)))) (K false)) (K true)) (K false)) 1 (* (pred 2) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))))) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] ((((((fn [g h] (h (g (K false)))) (K true)) (K false)) 1 (* (pred 2) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))))) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] (((((fn [h] (h ((K true) (K false)))) (K false)) 1 (* (pred 2) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))))) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] (((((K false) ((K true) (K false))) 1 (* (pred 2) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))))) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] ((((((fn [x] (fn [u] x)) false) ((K true) (K false))) 1 (* (pred 2) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))))) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] (((((fn [u] false) ((K true) (K false))) 1 (* (pred 2) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))))) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] (((false 1 (* (pred 2) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))))) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] ((((fn [a b] b) 1 (* (pred 2) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))))) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] ((((fn [b] b) (* (pred 2) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))))) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] (((* (pred 2) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2)))) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] ((((fn [m n] (fn [f x2] (m (n f) x2))) (pred 2) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2)))) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] ((((fn [n] (fn [f x2] ((pred 2) (n f) x2))) (((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2)))) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] (((fn [f x2] ((pred 2) ((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))) f) x2)) f) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] ((fn [x2] ((pred 2) ((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))) f) x2)) (((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred 2)) f) x1)))
(fn [f x1] ((pred 2) ((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))) f) (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)))
(fn [f x1] (((fn [n] (fn [f x] (extract (n (inc f) (K x))))) 2) ((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))) f) (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)))
(fn [f x1] ((fn [f x] (extract (2 (inc f) (K x)))) ((((fn [x] (fact_ (x x))) (fn [x] (fact_ (x x)))) (pred (pred 2))) f) (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)))
(fn [f x1] ((fn [x] (extract (2 (inc ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)) (K x)))) (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)))
(fn [f x1] (extract (2 (inc ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)) (K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)))))
(fn [f x1] ((fn [k] (k I)) (2 (inc ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)) (K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)))))
(fn [f x1] ((2 (inc ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)) (K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1))) I))
(fn [f x1] (((fn [f x] (f (f x))) (inc ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)) (K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1))) I))
(fn [f x1] (((fn [x] ((inc ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)) ((inc ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)) x))) (K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1))) I))
(fn [f x1] (((inc ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)) ((inc ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)) (K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)))) I))
(fn [f x1] ((((fn [f] (fn [g h] (h (g f)))) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)) ((inc ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)) (K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)))) I))
(fn [f x1] (((fn [g h] (h (g ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))) ((inc ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)) (K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)))) I))
(fn [f x1] ((fn [h] (h (((inc ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f)) (K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1))) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))) I))
(fn [f x1] (I (((inc ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f)) (K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1))) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f))))
(fn [f x1] ((fn [x] x) (((inc ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f)) (K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1))) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f))))
(fn [f x1] (((inc ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f)) (K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1))) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))
(fn [f x1] ((((fn [f] (fn [g h] (h (g f)))) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f)) (K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1))) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))
(fn [f x1] (((fn [g h] (h (g ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f)))) (K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1))) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))
(fn [f x1] ((fn [h] (h ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f)))) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))
(fn [f x1] (((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] ((((fact_ ((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2))))) (pred (pred 2))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] (((((fn [f n] ((zero? n) 1 (* n (f (pred n))))) ((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2))))) (pred (pred 2))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] ((((fn [n] ((zero? n) 1 (* n (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred n))))) (pred (pred 2))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] ((((zero? (pred (pred 2))) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] (((((fn [n] (n (K false) true)) (pred (pred 2))) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] (((((pred (pred 2)) (K false) true) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] ((((((fn [n] (fn [f x] (extract (n (inc f) (K x))))) (pred 2)) (K false) true) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] (((((fn [f x] (extract ((pred 2) (inc f) (K x)))) (K false) true) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] (((((fn [x] (extract ((pred 2) (inc (K false)) (K x)))) true) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] ((((extract ((pred 2) (inc (K false)) (K true))) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] (((((fn [k] (k I)) ((pred 2) (inc (K false)) (K true))) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] ((((((pred 2) (inc (K false)) (K true)) I) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] (((((((fn [n] (fn [f x] (extract (n (inc f) (K x))))) 2) (inc (K false)) (K true)) I) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] ((((((fn [f x] (extract (2 (inc f) (K x)))) (inc (K false)) (K true)) I) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] ((((((fn [x] (extract (2 (inc (inc (K false))) (K x)))) (K true)) I) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] (((((extract (2 (inc (inc (K false))) (K (K true)))) I) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] ((((((fn [k] (k I)) (2 (inc (inc (K false))) (K (K true)))) I) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] ((((((2 (inc (inc (K false))) (K (K true))) I) I) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] (((((((fn [f x] (f (f x))) (inc (inc (K false))) (K (K true))) I) I) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] (((((((fn [x] ((inc (inc (K false))) ((inc (inc (K false))) x))) (K (K true))) I) I) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] (((((((inc (inc (K false))) ((inc (inc (K false))) (K (K true)))) I) I) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] ((((((((fn [f] (fn [g h] (h (g f)))) (inc (K false))) ((inc (inc (K false))) (K (K true)))) I) I) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] (((((((fn [g h] (h (g (inc (K false))))) ((inc (inc (K false))) (K (K true)))) I) I) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] ((((((fn [h] (h (((inc (inc (K false))) (K (K true))) (inc (K false))))) I) I) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] (((((I (((inc (inc (K false))) (K (K true))) (inc (K false)))) I) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] ((((((fn [x] x) (((inc (inc (K false))) (K (K true))) (inc (K false)))) I) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] (((((((inc (inc (K false))) (K (K true))) (inc (K false))) I) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] ((((((((fn [f] (fn [g h] (h (g f)))) (inc (K false))) (K (K true))) (inc (K false))) I) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] (((((((fn [g h] (h (g (inc (K false))))) (K (K true))) (inc (K false))) I) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] ((((((fn [h] (h ((K (K true)) (inc (K false))))) (inc (K false))) I) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] ((((((inc (K false)) ((K (K true)) (inc (K false)))) I) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] (((((((fn [f] (fn [g h] (h (g f)))) (K false)) ((K (K true)) (inc (K false)))) I) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] ((((((fn [g h] (h (g (K false)))) ((K (K true)) (inc (K false)))) I) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] (((((fn [h] (h (((K (K true)) (inc (K false))) (K false)))) I) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] ((((I (((K (K true)) (inc (K false))) (K false))) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] (((((fn [x] x) (((K (K true)) (inc (K false))) (K false))) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] ((((((K (K true)) (inc (K false))) (K false)) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] (((((((fn [x] (fn [u] x)) (K true)) (inc (K false))) (K false)) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] ((((((fn [u] (K true)) (inc (K false))) (K false)) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] (((((K true) (K false)) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] ((((((fn [x] (fn [u] x)) true) (K false)) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] (((((fn [u] true) (K false)) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] (((true 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] ((((fn [a b] a) 1 (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] ((((fn [b] 1) (* (pred (pred 2)) (((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred (pred 2)))))) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] ((1 f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] (((fn [f x] (f x)) f) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] ((fn [x] (f x)) ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] (f ((K (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] (f (((fn [x] (fn [u] x)) (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] (f ((fn [u] (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)) ((((fn [x4] (fact_ (x4 x4))) (fn [x4] (fact_ (x4 x4)))) (pred (pred 2))) f))))
(fn [f x1] (f (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred 2)) f) x1)))
(fn [f x1] (f ((((fact_ ((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3))))) (pred 2)) f) x1)))
(fn [f x1] (f (((((fn [f n] ((zero? n) 1 (* n (f (pred n))))) ((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3))))) (pred 2)) f) x1)))
(fn [f x1] (f ((((fn [n] ((zero? n) 1 (* n (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred n))))) (pred 2)) f) x1)))
(fn [f x1] (f ((((zero? (pred 2)) 1 (* (pred 2) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))))) f) x1)))
(fn [f x1] (f (((((fn [n] (n (K false) true)) (pred 2)) 1 (* (pred 2) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))))) f) x1)))
(fn [f x1] (f (((((pred 2) (K false) true) 1 (* (pred 2) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))))) f) x1)))
(fn [f x1] (f ((((((fn [n] (fn [f x] (extract (n (inc f) (K x))))) 2) (K false) true) 1 (* (pred 2) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))))) f) x1)))
(fn [f x1] (f (((((fn [f x] (extract (2 (inc f) (K x)))) (K false) true) 1 (* (pred 2) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))))) f) x1)))
(fn [f x1] (f (((((fn [x] (extract (2 (inc (K false)) (K x)))) true) 1 (* (pred 2) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))))) f) x1)))
(fn [f x1] (f ((((extract (2 (inc (K false)) (K true))) 1 (* (pred 2) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))))) f) x1)))
(fn [f x1] (f (((((fn [k] (k I)) (2 (inc (K false)) (K true))) 1 (* (pred 2) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))))) f) x1)))
(fn [f x1] (f (((((2 (inc (K false)) (K true)) I) 1 (* (pred 2) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))))) f) x1)))
(fn [f x1] (f ((((((fn [f x] (f (f x))) (inc (K false)) (K true)) I) 1 (* (pred 2) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))))) f) x1)))
(fn [f x1] (f ((((((fn [x] ((inc (K false)) ((inc (K false)) x))) (K true)) I) 1 (* (pred 2) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))))) f) x1)))
(fn [f x1] (f ((((((inc (K false)) ((inc (K false)) (K true))) I) 1 (* (pred 2) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))))) f) x1)))
(fn [f x1] (f (((((((fn [f] (fn [g h] (h (g f)))) (K false)) ((inc (K false)) (K true))) I) 1 (* (pred 2) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))))) f) x1)))
(fn [f x1] (f ((((((fn [g h] (h (g (K false)))) ((inc (K false)) (K true))) I) 1 (* (pred 2) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))))) f) x1)))
(fn [f x1] (f (((((fn [h] (h (((inc (K false)) (K true)) (K false)))) I) 1 (* (pred 2) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))))) f) x1)))
(fn [f x1] (f ((((I (((inc (K false)) (K true)) (K false))) 1 (* (pred 2) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))))) f) x1)))
(fn [f x1] (f (((((fn [x] x) (((inc (K false)) (K true)) (K false))) 1 (* (pred 2) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))))) f) x1)))
(fn [f x1] (f ((((((inc (K false)) (K true)) (K false)) 1 (* (pred 2) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))))) f) x1)))
(fn [f x1] (f (((((((fn [f] (fn [g h] (h (g f)))) (K false)) (K true)) (K false)) 1 (* (pred 2) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))))) f) x1)))
(fn [f x1] (f ((((((fn [g h] (h (g (K false)))) (K true)) (K false)) 1 (* (pred 2) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))))) f) x1)))
(fn [f x1] (f (((((fn [h] (h ((K true) (K false)))) (K false)) 1 (* (pred 2) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))))) f) x1)))
(fn [f x1] (f (((((K false) ((K true) (K false))) 1 (* (pred 2) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))))) f) x1)))
(fn [f x1] (f ((((((fn [x] (fn [u] x)) false) ((K true) (K false))) 1 (* (pred 2) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))))) f) x1)))
(fn [f x1] (f (((((fn [u] false) ((K true) (K false))) 1 (* (pred 2) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))))) f) x1)))
(fn [f x1] (f (((false 1 (* (pred 2) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))))) f) x1)))
(fn [f x1] (f ((((fn [a b] b) 1 (* (pred 2) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))))) f) x1)))
(fn [f x1] (f ((((fn [b] b) (* (pred 2) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))))) f) x1)))
(fn [f x1] (f (((* (pred 2) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2)))) f) x1)))
(fn [f x1] (f ((((fn [m n] (fn [f x] (m (n f) x))) (pred 2) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2)))) f) x1)))
(fn [f x1] (f ((((fn [n] (fn [f x] ((pred 2) (n f) x))) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2)))) f) x1)))
(fn [f x1] (f (((fn [f x] ((pred 2) ((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))) f) x)) f) x1)))
(fn [f x1] (f ((fn [x] ((pred 2) ((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))) f) x)) x1)))
(fn [f x1] (f ((pred 2) ((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))) f) x1)))
(fn [f x1] (f (((fn [n] (fn [f x] (extract (n (inc f) (K x))))) 2) ((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))) f) x1)))
(fn [f x1] (f ((fn [f x] (extract (2 (inc f) (K x)))) ((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))) f) x1)))
(fn [f x1] (f ((fn [x] (extract (2 (inc ((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))) f)) (K x)))) x1)))
(fn [f x1] (f (extract (2 (inc ((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))) f)) (K x1)))))
(fn [f x1] (f ((fn [k] (k I)) (2 (inc ((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))) f)) (K x1)))))
(fn [f x1] (f ((2 (inc ((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))) f)) (K x1)) I)))
(fn [f x1] (f (((fn [f x] (f (f x))) (inc ((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))) f)) (K x1)) I)))
(fn [f x1] (f (((fn [x] ((inc ((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))) f)) ((inc ((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))) f)) x))) (K x1)) I)))
(fn [f x1] (f (((inc ((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))) f)) ((inc ((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))) f)) (K x1))) I)))
(fn [f x1] (f ((((fn [f] (fn [g h] (h (g f)))) ((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))) f)) ((inc ((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))) f)) (K x1))) I)))
(fn [f x1] (f (((fn [g h] (h (g ((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))) f)))) ((inc ((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))) f)) (K x1))) I)))
(fn [f x1] (f ((fn [h] (h (((inc ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)) (K x1)) ((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))) f)))) I)))
(fn [f x1] (f (I (((inc ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)) (K x1)) ((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))) f)))))
(fn [f x1] (f ((fn [x] x) (((inc ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)) (K x1)) ((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))) f)))))
(fn [f x1] (f (((inc ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)) (K x1)) ((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))) f))))
(fn [f x1] (f ((((fn [f] (fn [g h] (h (g f)))) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)) (K x1)) ((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))) f))))
(fn [f x1] (f (((fn [g h] (h (g ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))) (K x1)) ((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))) f))))
(fn [f x1] (f ((fn [h] (h ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))) ((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))) f))))
(fn [f x1] (f (((((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred 2))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f ((((fact_ ((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3))))) (pred (pred 2))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f (((((fn [f n] ((zero? n) 1 (* n (f (pred n))))) ((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3))))) (pred (pred 2))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f ((((fn [n] ((zero? n) 1 (* n (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred n))))) (pred (pred 2))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f ((((zero? (pred (pred 2))) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f (((((fn [n] (n (K false) true)) (pred (pred 2))) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f (((((pred (pred 2)) (K false) true) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f ((((((fn [n] (fn [f x] (extract (n (inc f) (K x))))) (pred 2)) (K false) true) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f (((((fn [f x] (extract ((pred 2) (inc f) (K x)))) (K false) true) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f (((((fn [x] (extract ((pred 2) (inc (K false)) (K x)))) true) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f ((((extract ((pred 2) (inc (K false)) (K true))) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f (((((fn [k] (k I)) ((pred 2) (inc (K false)) (K true))) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f ((((((pred 2) (inc (K false)) (K true)) I) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f (((((((fn [n] (fn [f x] (extract (n (inc f) (K x))))) 2) (inc (K false)) (K true)) I) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f ((((((fn [f x] (extract (2 (inc f) (K x)))) (inc (K false)) (K true)) I) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f ((((((fn [x] (extract (2 (inc (inc (K false))) (K x)))) (K true)) I) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f (((((extract (2 (inc (inc (K false))) (K (K true)))) I) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f ((((((fn [k] (k I)) (2 (inc (inc (K false))) (K (K true)))) I) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f ((((((2 (inc (inc (K false))) (K (K true))) I) I) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f (((((((fn [f x] (f (f x))) (inc (inc (K false))) (K (K true))) I) I) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f (((((((fn [x] ((inc (inc (K false))) ((inc (inc (K false))) x))) (K (K true))) I) I) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f (((((((inc (inc (K false))) ((inc (inc (K false))) (K (K true)))) I) I) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f ((((((((fn [f] (fn [g h] (h (g f)))) (inc (K false))) ((inc (inc (K false))) (K (K true)))) I) I) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f (((((((fn [g h] (h (g (inc (K false))))) ((inc (inc (K false))) (K (K true)))) I) I) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f ((((((fn [h] (h (((inc (inc (K false))) (K (K true))) (inc (K false))))) I) I) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f (((((I (((inc (inc (K false))) (K (K true))) (inc (K false)))) I) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f ((((((fn [x] x) (((inc (inc (K false))) (K (K true))) (inc (K false)))) I) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f (((((((inc (inc (K false))) (K (K true))) (inc (K false))) I) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f ((((((((fn [f] (fn [g h] (h (g f)))) (inc (K false))) (K (K true))) (inc (K false))) I) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f (((((((fn [g h] (h (g (inc (K false))))) (K (K true))) (inc (K false))) I) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f ((((((fn [h] (h ((K (K true)) (inc (K false))))) (inc (K false))) I) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f ((((((inc (K false)) ((K (K true)) (inc (K false)))) I) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f (((((((fn [f] (fn [g h] (h (g f)))) (K false)) ((K (K true)) (inc (K false)))) I) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f ((((((fn [g h] (h (g (K false)))) ((K (K true)) (inc (K false)))) I) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f (((((fn [h] (h (((K (K true)) (inc (K false))) (K false)))) I) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f ((((I (((K (K true)) (inc (K false))) (K false))) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f (((((fn [x] x) (((K (K true)) (inc (K false))) (K false))) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f ((((((K (K true)) (inc (K false))) (K false)) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f (((((((fn [x] (fn [u] x)) (K true)) (inc (K false))) (K false)) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f ((((((fn [u] (K true)) (inc (K false))) (K false)) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f (((((K true) (K false)) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f ((((((fn [x] (fn [u] x)) true) (K false)) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f (((((fn [u] true) (K false)) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f (((true 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f ((((fn [a b] a) 1 (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f ((((fn [b] 1) (* (pred (pred 2)) (((fn [x3] (fact_ (x3 x3))) (fn [x3] (fact_ (x3 x3)))) (pred (pred (pred 2)))))) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f ((1 f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f (((fn [f x] (f x)) f) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f ((fn [x] (f x)) ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f (f ((K x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f (f (((fn [x] (fn [u] x)) x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f (f ((fn [u] x1) ((((fn [x2] (fact_ (x2 x2))) (fn [x2] (fact_ (x2 x2)))) (pred (pred 2))) f)))))
(fn [f x1] (f (f x1)))
